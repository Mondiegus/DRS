
DRS_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033ec  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003574  08003574  00013574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035a4  080035a4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080035a4  080035a4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080035a4  080035a4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035a4  080035a4  000135a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035a8  080035a8  000135a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080035ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  2000000c  080035b8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ac  080035b8  000201ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d716  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002048  00000000  00000000  0002d752  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c68  00000000  00000000  0002f7a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b40  00000000  00000000  00030408  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001dfd0  00000000  00000000  00030f48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bf18  00000000  00000000  0004ef18  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b3f1d  00000000  00000000  0005ae30  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010ed4d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003294  00000000  00000000  0010edc8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800355c 	.word	0x0800355c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800355c 	.word	0x0800355c

080001c8 <CAN_FIFO_Flush>:
uint8_t CAN_FIFO_Empty(struct CAN_FIFO *fifo){

	return fifo->empty;
}

void CAN_FIFO_Flush(struct CAN_FIFO *fifo){
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]

	fifo->first_element=0;
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	2200      	movs	r2, #0
 80001d4:	701a      	strb	r2, [r3, #0]
	fifo->last_element=0;
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	2200      	movs	r2, #0
 80001da:	705a      	strb	r2, [r3, #1]
	fifo->empty=1;
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	2201      	movs	r2, #1
 80001e0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

}
 80001e4:	bf00      	nop
 80001e6:	370c      	adds	r7, #12
 80001e8:	46bd      	mov	sp, r7
 80001ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ee:	4770      	bx	lr

080001f0 <CAN_Init>:
	struct can_frame* pFrames[CAN_MAX_FRAME_NUM];
	uint8_t values_num;
}_can_info;


void CAN_Init(){
 80001f0:	b580      	push	{r7, lr}
 80001f2:	af00      	add	r7, sp, #0
	CAN_HW_Init();
 80001f4:	f000 f952 	bl	800049c <CAN_HW_Init>
	CAN_FIFO_Flush(&FIFO_CAN_TX);
 80001f8:	4802      	ldr	r0, [pc, #8]	; (8000204 <CAN_Init+0x14>)
 80001fa:	f7ff ffe5 	bl	80001c8 <CAN_FIFO_Flush>
}
 80001fe:	bf00      	nop
 8000200:	bd80      	pop	{r7, pc}
 8000202:	bf00      	nop
 8000204:	200000ac 	.word	0x200000ac

08000208 <CAN_InitFrame>:

void CAN_InitFrame(struct can_frame* pFrame, uint16_t id, uint16_t period, uint8_t dlc) {
 8000208:	b480      	push	{r7}
 800020a:	b085      	sub	sp, #20
 800020c:	af00      	add	r7, sp, #0
 800020e:	60f8      	str	r0, [r7, #12]
 8000210:	4608      	mov	r0, r1
 8000212:	4611      	mov	r1, r2
 8000214:	461a      	mov	r2, r3
 8000216:	4603      	mov	r3, r0
 8000218:	817b      	strh	r3, [r7, #10]
 800021a:	460b      	mov	r3, r1
 800021c:	813b      	strh	r3, [r7, #8]
 800021e:	4613      	mov	r3, r2
 8000220:	71fb      	strb	r3, [r7, #7]
	
	pFrame->core.id = id;
 8000222:	897a      	ldrh	r2, [r7, #10]
 8000224:	68fb      	ldr	r3, [r7, #12]
 8000226:	605a      	str	r2, [r3, #4]
	pFrame->period = period;
 8000228:	68fb      	ldr	r3, [r7, #12]
 800022a:	893a      	ldrh	r2, [r7, #8]
 800022c:	829a      	strh	r2, [r3, #20]
	pFrame->core.dlc = dlc;
 800022e:	79fa      	ldrb	r2, [r7, #7]
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	609a      	str	r2, [r3, #8]
	_can_info.pFrames[_can_info.frames_num] = pFrame;
 8000234:	4b09      	ldr	r3, [pc, #36]	; (800025c <CAN_InitFrame+0x54>)
 8000236:	781b      	ldrb	r3, [r3, #0]
 8000238:	4a08      	ldr	r2, [pc, #32]	; (800025c <CAN_InitFrame+0x54>)
 800023a:	009b      	lsls	r3, r3, #2
 800023c:	4413      	add	r3, r2
 800023e:	68fa      	ldr	r2, [r7, #12]
 8000240:	605a      	str	r2, [r3, #4]
	_can_info.frames_num++;
 8000242:	4b06      	ldr	r3, [pc, #24]	; (800025c <CAN_InitFrame+0x54>)
 8000244:	781b      	ldrb	r3, [r3, #0]
 8000246:	3301      	adds	r3, #1
 8000248:	b2da      	uxtb	r2, r3
 800024a:	4b04      	ldr	r3, [pc, #16]	; (800025c <CAN_InitFrame+0x54>)
 800024c:	701a      	strb	r2, [r3, #0]
}
 800024e:	bf00      	nop
 8000250:	3714      	adds	r7, #20
 8000252:	46bd      	mov	sp, r7
 8000254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000258:	4770      	bx	lr
 800025a:	bf00      	nop
 800025c:	200000dc 	.word	0x200000dc

08000260 <CAN_InitValue>:
	pFrame->core.isExtId = 1;
	pFrame->core.id |= ((ext_id<<14)>>14)<<18;
}

void CAN_InitValue(struct can_frame* pFrame, struct can_value* pCan_value, uint8_t bit_ofs,
					uint16_t mult, uint16_t div, uint16_t ofs, enum can_value_type type) {
 8000260:	b480      	push	{r7}
 8000262:	b085      	sub	sp, #20
 8000264:	af00      	add	r7, sp, #0
 8000266:	60f8      	str	r0, [r7, #12]
 8000268:	60b9      	str	r1, [r7, #8]
 800026a:	4611      	mov	r1, r2
 800026c:	461a      	mov	r2, r3
 800026e:	460b      	mov	r3, r1
 8000270:	71fb      	strb	r3, [r7, #7]
 8000272:	4613      	mov	r3, r2
 8000274:	80bb      	strh	r3, [r7, #4]
	
	pCan_value->pFrame = pFrame;
 8000276:	68bb      	ldr	r3, [r7, #8]
 8000278:	68fa      	ldr	r2, [r7, #12]
 800027a:	601a      	str	r2, [r3, #0]
	pCan_value->bit_ofs = bit_ofs;
 800027c:	68bb      	ldr	r3, [r7, #8]
 800027e:	79fa      	ldrb	r2, [r7, #7]
 8000280:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	pCan_value->mult = mult;
 8000284:	68bb      	ldr	r3, [r7, #8]
 8000286:	88ba      	ldrh	r2, [r7, #4]
 8000288:	85da      	strh	r2, [r3, #46]	; 0x2e
	pCan_value->div = div;
 800028a:	68bb      	ldr	r3, [r7, #8]
 800028c:	8b3a      	ldrh	r2, [r7, #24]
 800028e:	861a      	strh	r2, [r3, #48]	; 0x30
	pCan_value->ofs = ofs;
 8000290:	68bb      	ldr	r3, [r7, #8]
 8000292:	8bba      	ldrh	r2, [r7, #28]
 8000294:	865a      	strh	r2, [r3, #50]	; 0x32
	pCan_value->type = type;
 8000296:	68bb      	ldr	r3, [r7, #8]
 8000298:	f897 2020 	ldrb.w	r2, [r7, #32]
 800029c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	pFrame->values_num++;
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	7f1b      	ldrb	r3, [r3, #28]
 80002a4:	3301      	adds	r3, #1
 80002a6:	b2da      	uxtb	r2, r3
 80002a8:	68fb      	ldr	r3, [r7, #12]
 80002aa:	771a      	strb	r2, [r3, #28]
	_can_info.values_num++;
 80002ac:	4b06      	ldr	r3, [pc, #24]	; (80002c8 <CAN_InitValue+0x68>)
 80002ae:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80002b2:	3301      	adds	r3, #1
 80002b4:	b2da      	uxtb	r2, r3
 80002b6:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <CAN_InitValue+0x68>)
 80002b8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
}
 80002bc:	bf00      	nop
 80002be:	3714      	adds	r7, #20
 80002c0:	46bd      	mov	sp, r7
 80002c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c6:	4770      	bx	lr
 80002c8:	200000dc 	.word	0x200000dc

080002cc <CAN_ConvertFrameBitsToUint>:
	}
	return 255;
}
/**********************************************/

 uint32_t CAN_ConvertFrameBitsToUint(uint8_t* ptr, uint8_t bit_ofs, uint8_t length){
 80002cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80002d0:	b083      	sub	sp, #12
 80002d2:	af00      	add	r7, sp, #0
 80002d4:	6078      	str	r0, [r7, #4]
 80002d6:	4608      	mov	r0, r1
 80002d8:	4611      	mov	r1, r2
 80002da:	4602      	mov	r2, r0
 80002dc:	70fa      	strb	r2, [r7, #3]
 80002de:	460a      	mov	r2, r1
 80002e0:	70ba      	strb	r2, [r7, #2]
	return (uint32_t)((((*(uint64_t*)ptr)>>bit_ofs)<<(64-length))>>(64-length));
 80002e2:	687a      	ldr	r2, [r7, #4]
 80002e4:	e9d2 1200 	ldrd	r1, r2, [r2]
 80002e8:	78f8      	ldrb	r0, [r7, #3]
 80002ea:	f1c0 0e20 	rsb	lr, r0, #32
 80002ee:	f1a0 0c20 	sub.w	ip, r0, #32
 80002f2:	fa21 f500 	lsr.w	r5, r1, r0
 80002f6:	fa02 fe0e 	lsl.w	lr, r2, lr
 80002fa:	ea45 050e 	orr.w	r5, r5, lr
 80002fe:	fa22 fc0c 	lsr.w	ip, r2, ip
 8000302:	ea45 050c 	orr.w	r5, r5, ip
 8000306:	fa22 f600 	lsr.w	r6, r2, r0
 800030a:	78ba      	ldrb	r2, [r7, #2]
 800030c:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
 8000310:	f1a2 0020 	sub.w	r0, r2, #32
 8000314:	f1c2 0120 	rsb	r1, r2, #32
 8000318:	fa06 f402 	lsl.w	r4, r6, r2
 800031c:	fa05 f000 	lsl.w	r0, r5, r0
 8000320:	4304      	orrs	r4, r0
 8000322:	fa25 f101 	lsr.w	r1, r5, r1
 8000326:	430c      	orrs	r4, r1
 8000328:	fa05 f302 	lsl.w	r3, r5, r2
 800032c:	78ba      	ldrb	r2, [r7, #2]
 800032e:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
 8000332:	f1c2 0020 	rsb	r0, r2, #32
 8000336:	f1a2 0120 	sub.w	r1, r2, #32
 800033a:	fa23 f802 	lsr.w	r8, r3, r2
 800033e:	fa04 f000 	lsl.w	r0, r4, r0
 8000342:	ea48 0800 	orr.w	r8, r8, r0
 8000346:	fa24 f101 	lsr.w	r1, r4, r1
 800034a:	ea48 0801 	orr.w	r8, r8, r1
 800034e:	fa24 f902 	lsr.w	r9, r4, r2
 8000352:	4643      	mov	r3, r8
}
 8000354:	4618      	mov	r0, r3
 8000356:	370c      	adds	r7, #12
 8000358:	46bd      	mov	sp, r7
 800035a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800035e <CAN_ConvertFrameBitsToInt>:

 int32_t CAN_ConvertFrameBitsToInt(uint8_t* ptr, uint8_t bit_ofs, uint8_t length){
 800035e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000362:	b083      	sub	sp, #12
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
 8000368:	4608      	mov	r0, r1
 800036a:	4611      	mov	r1, r2
 800036c:	4602      	mov	r2, r0
 800036e:	70fa      	strb	r2, [r7, #3]
 8000370:	460a      	mov	r2, r1
 8000372:	70ba      	strb	r2, [r7, #2]
	return (int32_t)((((*(int64_t*)ptr)>>bit_ofs)<<(64-length))>>(64-length));
 8000374:	687a      	ldr	r2, [r7, #4]
 8000376:	e9d2 1200 	ldrd	r1, r2, [r2]
 800037a:	78f8      	ldrb	r0, [r7, #3]
 800037c:	f1c0 0e20 	rsb	lr, r0, #32
 8000380:	f1b0 0c20 	subs.w	ip, r0, #32
 8000384:	fa21 f500 	lsr.w	r5, r1, r0
 8000388:	fa02 fe0e 	lsl.w	lr, r2, lr
 800038c:	ea45 050e 	orr.w	r5, r5, lr
 8000390:	d403      	bmi.n	800039a <CAN_ConvertFrameBitsToInt+0x3c>
 8000392:	fa42 fc0c 	asr.w	ip, r2, ip
 8000396:	ea45 050c 	orr.w	r5, r5, ip
 800039a:	fa42 f600 	asr.w	r6, r2, r0
 800039e:	78ba      	ldrb	r2, [r7, #2]
 80003a0:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
 80003a4:	f1a2 0020 	sub.w	r0, r2, #32
 80003a8:	f1c2 0120 	rsb	r1, r2, #32
 80003ac:	fa06 f402 	lsl.w	r4, r6, r2
 80003b0:	fa05 f000 	lsl.w	r0, r5, r0
 80003b4:	4304      	orrs	r4, r0
 80003b6:	fa25 f101 	lsr.w	r1, r5, r1
 80003ba:	430c      	orrs	r4, r1
 80003bc:	fa05 f302 	lsl.w	r3, r5, r2
 80003c0:	78ba      	ldrb	r2, [r7, #2]
 80003c2:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
 80003c6:	f1c2 0020 	rsb	r0, r2, #32
 80003ca:	f1b2 0120 	subs.w	r1, r2, #32
 80003ce:	fa23 f802 	lsr.w	r8, r3, r2
 80003d2:	fa04 f000 	lsl.w	r0, r4, r0
 80003d6:	ea48 0800 	orr.w	r8, r8, r0
 80003da:	d403      	bmi.n	80003e4 <CAN_ConvertFrameBitsToInt+0x86>
 80003dc:	fa44 f101 	asr.w	r1, r4, r1
 80003e0:	ea48 0801 	orr.w	r8, r8, r1
 80003e4:	fa44 f902 	asr.w	r9, r4, r2
 80003e8:	4643      	mov	r3, r8
}
 80003ea:	4618      	mov	r0, r3
 80003ec:	370c      	adds	r7, #12
 80003ee:	46bd      	mov	sp, r7
 80003f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080003f4 <CAN_ReadValueFloat>:
		//copy value bits to frame
		*ptr |= CAN_ConvertIntToFrameBits((uint32_t)value, pCan_value->bit_ofs, type);
	}
}

float CAN_ReadValueFloat(struct can_value* pCan_value){
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b084      	sub	sp, #16
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
	
	uint8_t type;
	float value;
	
	type = pCan_value->type;
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000402:	72fb      	strb	r3, [r7, #11]
	if(type <= 32){
 8000404:	7afb      	ldrb	r3, [r7, #11]
 8000406:	2b20      	cmp	r3, #32
 8000408:	d811      	bhi.n	800042e <CAN_ReadValueFloat+0x3a>
		value = (float)CAN_ConvertFrameBitsToUint(pCan_value->pFrame->core.data, pCan_value->bit_ofs, type);
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	f103 000c 	add.w	r0, r3, #12
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000418:	7afa      	ldrb	r2, [r7, #11]
 800041a:	4619      	mov	r1, r3
 800041c:	f7ff ff56 	bl	80002cc <CAN_ConvertFrameBitsToUint>
 8000420:	ee07 0a90 	vmov	s15, r0
 8000424:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000428:	edc7 7a03 	vstr	s15, [r7, #12]
 800042c:	e012      	b.n	8000454 <CAN_ReadValueFloat+0x60>
	}
	else{
		value = (float)CAN_ConvertFrameBitsToInt(pCan_value->pFrame->core.data, pCan_value->bit_ofs, type-32);
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	f103 000c 	add.w	r0, r3, #12
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 800043c:	7afb      	ldrb	r3, [r7, #11]
 800043e:	3b20      	subs	r3, #32
 8000440:	b2db      	uxtb	r3, r3
 8000442:	461a      	mov	r2, r3
 8000444:	f7ff ff8b 	bl	800035e <CAN_ConvertFrameBitsToInt>
 8000448:	ee07 0a90 	vmov	s15, r0
 800044c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000450:	edc7 7a03 	vstr	s15, [r7, #12]
	}

	value = (value + pCan_value->ofs)*pCan_value->mult/pCan_value->div;
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8000458:	ee07 3a90 	vmov	s15, r3
 800045c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000460:	edd7 7a03 	vldr	s15, [r7, #12]
 8000464:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800046c:	ee07 3a90 	vmov	s15, r3
 8000470:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000474:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800047c:	ee07 3a90 	vmov	s15, r3
 8000480:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000484:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000488:	edc7 7a03 	vstr	s15, [r7, #12]
	return value;
 800048c:	68fb      	ldr	r3, [r7, #12]
 800048e:	ee07 3a90 	vmov	s15, r3
}
 8000492:	eeb0 0a67 	vmov.f32	s0, s15
 8000496:	3710      	adds	r7, #16
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}

0800049c <CAN_HW_Init>:
#include "CAN_LIB_HW.h"

uint8_t retransmision_counter;

void CAN_HW_Init(){
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0

	static CAN_FilterTypeDef sFilterConfig;
	sFilterConfig.FilterBank = 0;
 80004a0:	4b1d      	ldr	r3, [pc, #116]	; (8000518 <CAN_HW_Init+0x7c>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80004a6:	4b1c      	ldr	r3, [pc, #112]	; (8000518 <CAN_HW_Init+0x7c>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80004ac:	4b1a      	ldr	r3, [pc, #104]	; (8000518 <CAN_HW_Init+0x7c>)
 80004ae:	2201      	movs	r2, #1
 80004b0:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterIdHigh = 0x0000;
 80004b2:	4b19      	ldr	r3, [pc, #100]	; (8000518 <CAN_HW_Init+0x7c>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 80004b8:	4b17      	ldr	r3, [pc, #92]	; (8000518 <CAN_HW_Init+0x7c>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 80004be:	4b16      	ldr	r3, [pc, #88]	; (8000518 <CAN_HW_Init+0x7c>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 80004c4:	4b14      	ldr	r3, [pc, #80]	; (8000518 <CAN_HW_Init+0x7c>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80004ca:	4b13      	ldr	r3, [pc, #76]	; (8000518 <CAN_HW_Init+0x7c>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterActivation = ENABLE;
 80004d0:	4b11      	ldr	r3, [pc, #68]	; (8000518 <CAN_HW_Init+0x7c>)
 80004d2:	2201      	movs	r2, #1
 80004d4:	621a      	str	r2, [r3, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 80004d6:	4b10      	ldr	r3, [pc, #64]	; (8000518 <CAN_HW_Init+0x7c>)
 80004d8:	220e      	movs	r2, #14
 80004da:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_CAN_ConfigFilter(&CAN_HANDLE, &sFilterConfig) != HAL_OK)
 80004dc:	490e      	ldr	r1, [pc, #56]	; (8000518 <CAN_HW_Init+0x7c>)
 80004de:	480f      	ldr	r0, [pc, #60]	; (800051c <CAN_HW_Init+0x80>)
 80004e0:	f000 fd01 	bl	8000ee6 <HAL_CAN_ConfigFilter>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d001      	beq.n	80004ee <CAN_HW_Init+0x52>
	{
		/* Filter configuration Error */
		Error_Handler();
 80004ea:	f000 f97d 	bl	80007e8 <Error_Handler>
	}

	if (HAL_CAN_Start(&CAN_HANDLE) != HAL_OK)
 80004ee:	480b      	ldr	r0, [pc, #44]	; (800051c <CAN_HW_Init+0x80>)
 80004f0:	f000 fdc3 	bl	800107a <HAL_CAN_Start>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d001      	beq.n	80004fe <CAN_HW_Init+0x62>
	{
		/* Start Error */
		Error_Handler();
 80004fa:	f000 f975 	bl	80007e8 <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(&CAN_HANDLE, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO0_OVERRUN
 80004fe:	f248 010f 	movw	r1, #32783	; 0x800f
 8000502:	4806      	ldr	r0, [pc, #24]	; (800051c <CAN_HW_Init+0x80>)
 8000504:	f000 fdfd 	bl	8001102 <HAL_CAN_ActivateNotification>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d001      	beq.n	8000512 <CAN_HW_Init+0x76>
			| CAN_IT_RX_FIFO0_FULL | CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_ERROR) != HAL_OK)
	{
		/* Notification Error */
		Error_Handler();
 800050e:	f000 f96b 	bl	80007e8 <Error_Handler>
	}

}
 8000512:	bf00      	nop
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	20000028 	.word	0x20000028
 800051c:	20000134 	.word	0x20000134

08000520 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0

  hcan.Instance = CAN;
 8000524:	4b16      	ldr	r3, [pc, #88]	; (8000580 <MX_CAN_Init+0x60>)
 8000526:	4a17      	ldr	r2, [pc, #92]	; (8000584 <MX_CAN_Init+0x64>)
 8000528:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 800052a:	4b15      	ldr	r3, [pc, #84]	; (8000580 <MX_CAN_Init+0x60>)
 800052c:	2210      	movs	r2, #16
 800052e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000530:	4b13      	ldr	r3, [pc, #76]	; (8000580 <MX_CAN_Init+0x60>)
 8000532:	2200      	movs	r2, #0
 8000534:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000536:	4b12      	ldr	r3, [pc, #72]	; (8000580 <MX_CAN_Init+0x60>)
 8000538:	2200      	movs	r2, #0
 800053a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 800053c:	4b10      	ldr	r3, [pc, #64]	; (8000580 <MX_CAN_Init+0x60>)
 800053e:	2200      	movs	r2, #0
 8000540:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000542:	4b0f      	ldr	r3, [pc, #60]	; (8000580 <MX_CAN_Init+0x60>)
 8000544:	2200      	movs	r2, #0
 8000546:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000548:	4b0d      	ldr	r3, [pc, #52]	; (8000580 <MX_CAN_Init+0x60>)
 800054a:	2200      	movs	r2, #0
 800054c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800054e:	4b0c      	ldr	r3, [pc, #48]	; (8000580 <MX_CAN_Init+0x60>)
 8000550:	2200      	movs	r2, #0
 8000552:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000554:	4b0a      	ldr	r3, [pc, #40]	; (8000580 <MX_CAN_Init+0x60>)
 8000556:	2200      	movs	r2, #0
 8000558:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800055a:	4b09      	ldr	r3, [pc, #36]	; (8000580 <MX_CAN_Init+0x60>)
 800055c:	2200      	movs	r2, #0
 800055e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000560:	4b07      	ldr	r3, [pc, #28]	; (8000580 <MX_CAN_Init+0x60>)
 8000562:	2200      	movs	r2, #0
 8000564:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000566:	4b06      	ldr	r3, [pc, #24]	; (8000580 <MX_CAN_Init+0x60>)
 8000568:	2200      	movs	r2, #0
 800056a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800056c:	4804      	ldr	r0, [pc, #16]	; (8000580 <MX_CAN_Init+0x60>)
 800056e:	f000 fbbf 	bl	8000cf0 <HAL_CAN_Init>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8000578:	f000 f936 	bl	80007e8 <Error_Handler>
  }

}
 800057c:	bf00      	nop
 800057e:	bd80      	pop	{r7, pc}
 8000580:	20000134 	.word	0x20000134
 8000584:	40006400 	.word	0x40006400

08000588 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b08a      	sub	sp, #40	; 0x28
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000590:	f107 0314 	add.w	r3, r7, #20
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
 800059e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a18      	ldr	r2, [pc, #96]	; (8000608 <HAL_CAN_MspInit+0x80>)
 80005a6:	4293      	cmp	r3, r2
 80005a8:	d129      	bne.n	80005fe <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80005aa:	4b18      	ldr	r3, [pc, #96]	; (800060c <HAL_CAN_MspInit+0x84>)
 80005ac:	69db      	ldr	r3, [r3, #28]
 80005ae:	4a17      	ldr	r2, [pc, #92]	; (800060c <HAL_CAN_MspInit+0x84>)
 80005b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005b4:	61d3      	str	r3, [r2, #28]
 80005b6:	4b15      	ldr	r3, [pc, #84]	; (800060c <HAL_CAN_MspInit+0x84>)
 80005b8:	69db      	ldr	r3, [r3, #28]
 80005ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005be:	613b      	str	r3, [r7, #16]
 80005c0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c2:	4b12      	ldr	r3, [pc, #72]	; (800060c <HAL_CAN_MspInit+0x84>)
 80005c4:	695b      	ldr	r3, [r3, #20]
 80005c6:	4a11      	ldr	r2, [pc, #68]	; (800060c <HAL_CAN_MspInit+0x84>)
 80005c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005cc:	6153      	str	r3, [r2, #20]
 80005ce:	4b0f      	ldr	r3, [pc, #60]	; (800060c <HAL_CAN_MspInit+0x84>)
 80005d0:	695b      	ldr	r3, [r3, #20]
 80005d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005d6:	60fb      	str	r3, [r7, #12]
 80005d8:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration    
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80005da:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80005de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005e0:	2302      	movs	r3, #2
 80005e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e4:	2300      	movs	r3, #0
 80005e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005e8:	2303      	movs	r3, #3
 80005ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 80005ec:	2309      	movs	r3, #9
 80005ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f0:	f107 0314 	add.w	r3, r7, #20
 80005f4:	4619      	mov	r1, r3
 80005f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005fa:	f000 fe8f 	bl	800131c <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 80005fe:	bf00      	nop
 8000600:	3728      	adds	r7, #40	; 0x28
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	40006400 	.word	0x40006400
 800060c:	40021000 	.word	0x40021000

08000610 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b08a      	sub	sp, #40	; 0x28
 8000614:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000616:	f107 0314 	add.w	r3, r7, #20
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]
 800061e:	605a      	str	r2, [r3, #4]
 8000620:	609a      	str	r2, [r3, #8]
 8000622:	60da      	str	r2, [r3, #12]
 8000624:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000626:	4b24      	ldr	r3, [pc, #144]	; (80006b8 <MX_GPIO_Init+0xa8>)
 8000628:	695b      	ldr	r3, [r3, #20]
 800062a:	4a23      	ldr	r2, [pc, #140]	; (80006b8 <MX_GPIO_Init+0xa8>)
 800062c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000630:	6153      	str	r3, [r2, #20]
 8000632:	4b21      	ldr	r3, [pc, #132]	; (80006b8 <MX_GPIO_Init+0xa8>)
 8000634:	695b      	ldr	r3, [r3, #20]
 8000636:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800063a:	613b      	str	r3, [r7, #16]
 800063c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800063e:	4b1e      	ldr	r3, [pc, #120]	; (80006b8 <MX_GPIO_Init+0xa8>)
 8000640:	695b      	ldr	r3, [r3, #20]
 8000642:	4a1d      	ldr	r2, [pc, #116]	; (80006b8 <MX_GPIO_Init+0xa8>)
 8000644:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000648:	6153      	str	r3, [r2, #20]
 800064a:	4b1b      	ldr	r3, [pc, #108]	; (80006b8 <MX_GPIO_Init+0xa8>)
 800064c:	695b      	ldr	r3, [r3, #20]
 800064e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000652:	60fb      	str	r3, [r7, #12]
 8000654:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000656:	4b18      	ldr	r3, [pc, #96]	; (80006b8 <MX_GPIO_Init+0xa8>)
 8000658:	695b      	ldr	r3, [r3, #20]
 800065a:	4a17      	ldr	r2, [pc, #92]	; (80006b8 <MX_GPIO_Init+0xa8>)
 800065c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000660:	6153      	str	r3, [r2, #20]
 8000662:	4b15      	ldr	r3, [pc, #84]	; (80006b8 <MX_GPIO_Init+0xa8>)
 8000664:	695b      	ldr	r3, [r3, #20]
 8000666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800066e:	4b12      	ldr	r3, [pc, #72]	; (80006b8 <MX_GPIO_Init+0xa8>)
 8000670:	695b      	ldr	r3, [r3, #20]
 8000672:	4a11      	ldr	r2, [pc, #68]	; (80006b8 <MX_GPIO_Init+0xa8>)
 8000674:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000678:	6153      	str	r3, [r2, #20]
 800067a:	4b0f      	ldr	r3, [pc, #60]	; (80006b8 <MX_GPIO_Init+0xa8>)
 800067c:	695b      	ldr	r3, [r3, #20]
 800067e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BLINK_GPIO_Port, LED_BLINK_Pin, GPIO_PIN_RESET);
 8000686:	2200      	movs	r2, #0
 8000688:	2104      	movs	r1, #4
 800068a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800068e:	f000 ffbf 	bl	8001610 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_BLINK_Pin;
 8000692:	2304      	movs	r3, #4
 8000694:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000696:	2301      	movs	r3, #1
 8000698:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069a:	2300      	movs	r3, #0
 800069c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069e:	2300      	movs	r3, #0
 80006a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_BLINK_GPIO_Port, &GPIO_InitStruct);
 80006a2:	f107 0314 	add.w	r3, r7, #20
 80006a6:	4619      	mov	r1, r3
 80006a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ac:	f000 fe36 	bl	800131c <HAL_GPIO_Init>

}
 80006b0:	bf00      	nop
 80006b2:	3728      	adds	r7, #40	; 0x28
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40021000 	.word	0x40021000

080006bc <CanDrs_Init>:
/* USER CODE BEGIN 0 */
static struct can_frame can_drs_frame;
static struct can_value can_drs_set;

void CanDrs_Init()
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af04      	add	r7, sp, #16
	CAN_Init();
 80006c2:	f7ff fd95 	bl	80001f0 <CAN_Init>
	CAN_InitFrame(&can_drs_frame, DRS_ID, DRS_PERIOD, DRS_DLC);
 80006c6:	2303      	movs	r3, #3
 80006c8:	2264      	movs	r2, #100	; 0x64
 80006ca:	2107      	movs	r1, #7
 80006cc:	4808      	ldr	r0, [pc, #32]	; (80006f0 <CanDrs_Init+0x34>)
 80006ce:	f7ff fd9b 	bl	8000208 <CAN_InitFrame>
	CAN_InitValue(&can_drs_frame, &can_drs_set, DRS_BIT_OFS, DRS_MUL, DRS_DIV, DRS_BIT_OFS, DRS_VALUE_TYPE);
 80006d2:	2308      	movs	r3, #8
 80006d4:	9302      	str	r3, [sp, #8]
 80006d6:	2300      	movs	r3, #0
 80006d8:	9301      	str	r3, [sp, #4]
 80006da:	2301      	movs	r3, #1
 80006dc:	9300      	str	r3, [sp, #0]
 80006de:	2301      	movs	r3, #1
 80006e0:	2200      	movs	r2, #0
 80006e2:	4904      	ldr	r1, [pc, #16]	; (80006f4 <CanDrs_Init+0x38>)
 80006e4:	4802      	ldr	r0, [pc, #8]	; (80006f0 <CanDrs_Init+0x34>)
 80006e6:	f7ff fdbb 	bl	8000260 <CAN_InitValue>
};
 80006ea:	bf00      	nop
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	20000050 	.word	0x20000050
 80006f4:	20000070 	.word	0x20000070

080006f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b086      	sub	sp, #24
 80006fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint16_t DrsFrame = 0;
 80006fe:	2300      	movs	r3, #0
 8000700:	82fb      	strh	r3, [r7, #22]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000702:	f000 fa8f 	bl	8000c24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000706:	f000 f82f 	bl	8000768 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800070a:	f7ff ff81 	bl	8000610 <MX_GPIO_Init>
  MX_CAN_Init();
 800070e:	f7ff ff07 	bl	8000520 <MX_CAN_Init>
  MX_TIM4_Init();
 8000712:	f000 f99f 	bl	8000a54 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  CanDrs_Init();
 8000716:	f7ff ffd1 	bl	80006bc <CanDrs_Init>

  servo_t servo1;
  servo_t servo2;


  Servo_Init(&servo1, &htim4, TIM_CHANNEL_3);
 800071a:	f107 030c 	add.w	r3, r7, #12
 800071e:	2208      	movs	r2, #8
 8000720:	490f      	ldr	r1, [pc, #60]	; (8000760 <main+0x68>)
 8000722:	4618      	mov	r0, r3
 8000724:	f000 f867 	bl	80007f6 <Servo_Init>
  Servo_Init(&servo2, &htim4, TIM_CHANNEL_4);
 8000728:	1d3b      	adds	r3, r7, #4
 800072a:	220c      	movs	r2, #12
 800072c:	490c      	ldr	r1, [pc, #48]	; (8000760 <main+0x68>)
 800072e:	4618      	mov	r0, r3
 8000730:	f000 f861 	bl	80007f6 <Servo_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  DrsFrame =  (uint16_t)CAN_ReadValueFloat(&can_drs_set);
 8000734:	480b      	ldr	r0, [pc, #44]	; (8000764 <main+0x6c>)
 8000736:	f7ff fe5d 	bl	80003f4 <CAN_ReadValueFloat>
 800073a:	eef0 7a40 	vmov.f32	s15, s0
 800073e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000742:	ee17 3a90 	vmov	r3, s15
 8000746:	b29b      	uxth	r3, r3
 8000748:	82fb      	strh	r3, [r7, #22]
	  ProceedServo(&servo1, &servo1, &DrsFrame);
 800074a:	f107 0216 	add.w	r2, r7, #22
 800074e:	f107 010c 	add.w	r1, r7, #12
 8000752:	f107 030c 	add.w	r3, r7, #12
 8000756:	4618      	mov	r0, r3
 8000758:	f000 f8d4 	bl	8000904 <ProceedServo>
	  DrsFrame =  (uint16_t)CAN_ReadValueFloat(&can_drs_set);
 800075c:	e7ea      	b.n	8000734 <main+0x3c>
 800075e:	bf00      	nop
 8000760:	2000015c 	.word	0x2000015c
 8000764:	20000070 	.word	0x20000070

08000768 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b090      	sub	sp, #64	; 0x40
 800076c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800076e:	f107 0318 	add.w	r3, r7, #24
 8000772:	2228      	movs	r2, #40	; 0x28
 8000774:	2100      	movs	r1, #0
 8000776:	4618      	mov	r0, r3
 8000778:	f002 fee8 	bl	800354c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800077c:	1d3b      	adds	r3, r7, #4
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]
 8000784:	609a      	str	r2, [r3, #8]
 8000786:	60da      	str	r2, [r3, #12]
 8000788:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800078a:	2302      	movs	r3, #2
 800078c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800078e:	2301      	movs	r3, #1
 8000790:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000792:	2310      	movs	r3, #16
 8000794:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000796:	2302      	movs	r3, #2
 8000798:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800079a:	2300      	movs	r3, #0
 800079c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 800079e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80007a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a4:	f107 0318 	add.w	r3, r7, #24
 80007a8:	4618      	mov	r0, r3
 80007aa:	f000 ff49 	bl	8001640 <HAL_RCC_OscConfig>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80007b4:	f000 f818 	bl	80007e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b8:	230f      	movs	r3, #15
 80007ba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007bc:	2302      	movs	r3, #2
 80007be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80007c0:	2380      	movs	r3, #128	; 0x80
 80007c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007c4:	2300      	movs	r3, #0
 80007c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007c8:	2300      	movs	r3, #0
 80007ca:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007cc:	1d3b      	adds	r3, r7, #4
 80007ce:	2100      	movs	r1, #0
 80007d0:	4618      	mov	r0, r3
 80007d2:	f001 fe3d 	bl	8002450 <HAL_RCC_ClockConfig>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80007dc:	f000 f804 	bl	80007e8 <Error_Handler>
  }
}
 80007e0:	bf00      	nop
 80007e2:	3740      	adds	r7, #64	; 0x40
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007ec:	bf00      	nop
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr

080007f6 <Servo_Init>:
#include "main.h"
#include "tim.h"
#include "servo.h"

void Servo_Init(servo_t *servo, TIM_HandleTypeDef *_htim, uint32_t _channel)
{
 80007f6:	b580      	push	{r7, lr}
 80007f8:	b084      	sub	sp, #16
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	60f8      	str	r0, [r7, #12]
 80007fe:	60b9      	str	r1, [r7, #8]
 8000800:	607a      	str	r2, [r7, #4]
	servo->htim = _htim;
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	68ba      	ldr	r2, [r7, #8]
 8000806:	601a      	str	r2, [r3, #0]
	servo->channel = _channel;
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	687a      	ldr	r2, [r7, #4]
 800080c:	605a      	str	r2, [r3, #4]

	HAL_TIM_PWM_Start(servo->htim, servo->channel);
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	681a      	ldr	r2, [r3, #0]
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	685b      	ldr	r3, [r3, #4]
 8000816:	4619      	mov	r1, r3
 8000818:	4610      	mov	r0, r2
 800081a:	f002 f857 	bl	80028cc <HAL_TIM_PWM_Start>
}
 800081e:	bf00      	nop
 8000820:	3710      	adds	r7, #16
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}

08000826 <map>:

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
 8000826:	b480      	push	{r7}
 8000828:	b085      	sub	sp, #20
 800082a:	af00      	add	r7, sp, #0
 800082c:	60f8      	str	r0, [r7, #12]
 800082e:	60b9      	str	r1, [r7, #8]
 8000830:	607a      	str	r2, [r7, #4]
 8000832:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000834:	68fa      	ldr	r2, [r7, #12]
 8000836:	68bb      	ldr	r3, [r7, #8]
 8000838:	1ad3      	subs	r3, r2, r3
 800083a:	69b9      	ldr	r1, [r7, #24]
 800083c:	683a      	ldr	r2, [r7, #0]
 800083e:	1a8a      	subs	r2, r1, r2
 8000840:	fb02 f203 	mul.w	r2, r2, r3
 8000844:	6879      	ldr	r1, [r7, #4]
 8000846:	68bb      	ldr	r3, [r7, #8]
 8000848:	1acb      	subs	r3, r1, r3
 800084a:	fb92 f2f3 	sdiv	r2, r2, r3
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	4413      	add	r3, r2
}
 8000852:	4618      	mov	r0, r3
 8000854:	3714      	adds	r7, #20
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr

0800085e <Servo_SetAngle>:

void Servo_SetAngle(servo_t *servo, uint16_t angle)
{
 800085e:	b580      	push	{r7, lr}
 8000860:	b086      	sub	sp, #24
 8000862:	af02      	add	r7, sp, #8
 8000864:	6078      	str	r0, [r7, #4]
 8000866:	460b      	mov	r3, r1
 8000868:	807b      	strh	r3, [r7, #2]
	if(angle < 0) angle = 0;
	if(angle > 180) angle = 180;
 800086a:	887b      	ldrh	r3, [r7, #2]
 800086c:	2bb4      	cmp	r3, #180	; 0xb4
 800086e:	d901      	bls.n	8000874 <Servo_SetAngle+0x16>
 8000870:	23b4      	movs	r3, #180	; 0xb4
 8000872:	807b      	strh	r3, [r7, #2]

	  uint16_t tmp = map(angle, ANGLE_MIN, ANGLE_MAX, SERVO_MIN, SERVO_MAX);
 8000874:	8878      	ldrh	r0, [r7, #2]
 8000876:	f640 13c9 	movw	r3, #2505	; 0x9c9
 800087a:	9300      	str	r3, [sp, #0]
 800087c:	f240 2326 	movw	r3, #550	; 0x226
 8000880:	22b4      	movs	r2, #180	; 0xb4
 8000882:	2100      	movs	r1, #0
 8000884:	f7ff ffcf 	bl	8000826 <map>
 8000888:	4603      	mov	r3, r0
 800088a:	81fb      	strh	r3, [r7, #14]
	  __HAL_TIM_SET_COMPARE(servo->htim, servo->channel, tmp);
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	685b      	ldr	r3, [r3, #4]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d105      	bne.n	80008a0 <Servo_SetAngle+0x42>
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	89fa      	ldrh	r2, [r7, #14]
 800089c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800089e:	e02c      	b.n	80008fa <Servo_SetAngle+0x9c>
	  __HAL_TIM_SET_COMPARE(servo->htim, servo->channel, tmp);
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	685b      	ldr	r3, [r3, #4]
 80008a4:	2b04      	cmp	r3, #4
 80008a6:	d105      	bne.n	80008b4 <Servo_SetAngle+0x56>
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	89fa      	ldrh	r2, [r7, #14]
 80008b0:	639a      	str	r2, [r3, #56]	; 0x38
}
 80008b2:	e022      	b.n	80008fa <Servo_SetAngle+0x9c>
	  __HAL_TIM_SET_COMPARE(servo->htim, servo->channel, tmp);
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	685b      	ldr	r3, [r3, #4]
 80008b8:	2b08      	cmp	r3, #8
 80008ba:	d105      	bne.n	80008c8 <Servo_SetAngle+0x6a>
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	89fa      	ldrh	r2, [r7, #14]
 80008c4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80008c6:	e018      	b.n	80008fa <Servo_SetAngle+0x9c>
	  __HAL_TIM_SET_COMPARE(servo->htim, servo->channel, tmp);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	685b      	ldr	r3, [r3, #4]
 80008cc:	2b0c      	cmp	r3, #12
 80008ce:	d105      	bne.n	80008dc <Servo_SetAngle+0x7e>
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	89fa      	ldrh	r2, [r7, #14]
 80008d8:	641a      	str	r2, [r3, #64]	; 0x40
}
 80008da:	e00e      	b.n	80008fa <Servo_SetAngle+0x9c>
	  __HAL_TIM_SET_COMPARE(servo->htim, servo->channel, tmp);
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	685b      	ldr	r3, [r3, #4]
 80008e0:	2b10      	cmp	r3, #16
 80008e2:	d105      	bne.n	80008f0 <Servo_SetAngle+0x92>
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	89fa      	ldrh	r2, [r7, #14]
 80008ec:	659a      	str	r2, [r3, #88]	; 0x58
}
 80008ee:	e004      	b.n	80008fa <Servo_SetAngle+0x9c>
	  __HAL_TIM_SET_COMPARE(servo->htim, servo->channel, tmp);
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	89fa      	ldrh	r2, [r7, #14]
 80008f8:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80008fa:	bf00      	nop
 80008fc:	3710      	adds	r7, #16
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
	...

08000904 <ProceedServo>:

void ProceedServo(servo_t *servo1, servo_t *servo2, uint16_t *DrsFrame)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0
 800090a:	60f8      	str	r0, [r7, #12]
 800090c:	60b9      	str	r1, [r7, #8]
 800090e:	607a      	str	r2, [r7, #4]
	static uint8_t CurrentAngle = 0;
	static uint8_t angleDirection = 0;

	if(*DrsFrame)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	881b      	ldrh	r3, [r3, #0]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d030      	beq.n	800097a <ProceedServo+0x76>
	  {
		  if (CurrentAngle == 0)
 8000918:	4b1a      	ldr	r3, [pc, #104]	; (8000984 <ProceedServo+0x80>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d103      	bne.n	8000928 <ProceedServo+0x24>
		  {
			  angleDirection = 1;
 8000920:	4b19      	ldr	r3, [pc, #100]	; (8000988 <ProceedServo+0x84>)
 8000922:	2201      	movs	r2, #1
 8000924:	701a      	strb	r2, [r3, #0]
 8000926:	e006      	b.n	8000936 <ProceedServo+0x32>
		  }
		  else if (CurrentAngle == 180)
 8000928:	4b16      	ldr	r3, [pc, #88]	; (8000984 <ProceedServo+0x80>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	2bb4      	cmp	r3, #180	; 0xb4
 800092e:	d102      	bne.n	8000936 <ProceedServo+0x32>
		  {
			  angleDirection = 0;
 8000930:	4b15      	ldr	r3, [pc, #84]	; (8000988 <ProceedServo+0x84>)
 8000932:	2200      	movs	r2, #0
 8000934:	701a      	strb	r2, [r3, #0]
		  }

		  if (angleDirection)
 8000936:	4b14      	ldr	r3, [pc, #80]	; (8000988 <ProceedServo+0x84>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d006      	beq.n	800094c <ProceedServo+0x48>
		  {
			  CurrentAngle++;
 800093e:	4b11      	ldr	r3, [pc, #68]	; (8000984 <ProceedServo+0x80>)
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	3301      	adds	r3, #1
 8000944:	b2da      	uxtb	r2, r3
 8000946:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <ProceedServo+0x80>)
 8000948:	701a      	strb	r2, [r3, #0]
 800094a:	e005      	b.n	8000958 <ProceedServo+0x54>
		  }
		  else
		  {
			  CurrentAngle--;
 800094c:	4b0d      	ldr	r3, [pc, #52]	; (8000984 <ProceedServo+0x80>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	3b01      	subs	r3, #1
 8000952:	b2da      	uxtb	r2, r3
 8000954:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <ProceedServo+0x80>)
 8000956:	701a      	strb	r2, [r3, #0]
		  }
		  Servo_SetAngle(servo2, CurrentAngle);
 8000958:	4b0a      	ldr	r3, [pc, #40]	; (8000984 <ProceedServo+0x80>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	b29b      	uxth	r3, r3
 800095e:	4619      	mov	r1, r3
 8000960:	68b8      	ldr	r0, [r7, #8]
 8000962:	f7ff ff7c 	bl	800085e <Servo_SetAngle>
		  Servo_SetAngle(servo1, 180-CurrentAngle);
 8000966:	4b07      	ldr	r3, [pc, #28]	; (8000984 <ProceedServo+0x80>)
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	b29b      	uxth	r3, r3
 800096c:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 8000970:	b29b      	uxth	r3, r3
 8000972:	4619      	mov	r1, r3
 8000974:	68f8      	ldr	r0, [r7, #12]
 8000976:	f7ff ff72 	bl	800085e <Servo_SetAngle>
	  }
}
 800097a:	bf00      	nop
 800097c:	3710      	adds	r7, #16
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	200000a8 	.word	0x200000a8
 8000988:	200000a9 	.word	0x200000a9

0800098c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000992:	4b0f      	ldr	r3, [pc, #60]	; (80009d0 <HAL_MspInit+0x44>)
 8000994:	699b      	ldr	r3, [r3, #24]
 8000996:	4a0e      	ldr	r2, [pc, #56]	; (80009d0 <HAL_MspInit+0x44>)
 8000998:	f043 0301 	orr.w	r3, r3, #1
 800099c:	6193      	str	r3, [r2, #24]
 800099e:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <HAL_MspInit+0x44>)
 80009a0:	699b      	ldr	r3, [r3, #24]
 80009a2:	f003 0301 	and.w	r3, r3, #1
 80009a6:	607b      	str	r3, [r7, #4]
 80009a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009aa:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <HAL_MspInit+0x44>)
 80009ac:	69db      	ldr	r3, [r3, #28]
 80009ae:	4a08      	ldr	r2, [pc, #32]	; (80009d0 <HAL_MspInit+0x44>)
 80009b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009b4:	61d3      	str	r3, [r2, #28]
 80009b6:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <HAL_MspInit+0x44>)
 80009b8:	69db      	ldr	r3, [r3, #28]
 80009ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009be:	603b      	str	r3, [r7, #0]
 80009c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009c2:	bf00      	nop
 80009c4:	370c      	adds	r7, #12
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	40021000 	.word	0x40021000

080009d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80009d8:	bf00      	nop
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr

080009e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009e2:	b480      	push	{r7}
 80009e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009e6:	e7fe      	b.n	80009e6 <HardFault_Handler+0x4>

080009e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009ec:	e7fe      	b.n	80009ec <MemManage_Handler+0x4>

080009ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ee:	b480      	push	{r7}
 80009f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009f2:	e7fe      	b.n	80009f2 <BusFault_Handler+0x4>

080009f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009f8:	e7fe      	b.n	80009f8 <UsageFault_Handler+0x4>

080009fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009fa:	b480      	push	{r7}
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009fe:	bf00      	nop
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr

08000a08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a0c:	bf00      	nop
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr

08000a16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a16:	b480      	push	{r7}
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr

08000a24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a28:	f000 f942 	bl	8000cb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a2c:	bf00      	nop
 8000a2e:	bd80      	pop	{r7, pc}

08000a30 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a34:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <SystemInit+0x20>)
 8000a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a3a:	4a05      	ldr	r2, [pc, #20]	; (8000a50 <SystemInit+0x20>)
 8000a3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a44:	bf00      	nop
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	e000ed00 	.word	0xe000ed00

08000a54 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08a      	sub	sp, #40	; 0x28
 8000a58:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a5a:	f107 031c 	add.w	r3, r7, #28
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	605a      	str	r2, [r3, #4]
 8000a64:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a66:	463b      	mov	r3, r7
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]
 8000a74:	615a      	str	r2, [r3, #20]
 8000a76:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8000a78:	4b27      	ldr	r3, [pc, #156]	; (8000b18 <MX_TIM4_Init+0xc4>)
 8000a7a:	4a28      	ldr	r2, [pc, #160]	; (8000b1c <MX_TIM4_Init+0xc8>)
 8000a7c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7;
 8000a7e:	4b26      	ldr	r3, [pc, #152]	; (8000b18 <MX_TIM4_Init+0xc4>)
 8000a80:	2207      	movs	r2, #7
 8000a82:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a84:	4b24      	ldr	r3, [pc, #144]	; (8000b18 <MX_TIM4_Init+0xc4>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000;
 8000a8a:	4b23      	ldr	r3, [pc, #140]	; (8000b18 <MX_TIM4_Init+0xc4>)
 8000a8c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000a90:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a92:	4b21      	ldr	r3, [pc, #132]	; (8000b18 <MX_TIM4_Init+0xc4>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a98:	4b1f      	ldr	r3, [pc, #124]	; (8000b18 <MX_TIM4_Init+0xc4>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000a9e:	481e      	ldr	r0, [pc, #120]	; (8000b18 <MX_TIM4_Init+0xc4>)
 8000aa0:	f001 febc 	bl	800281c <HAL_TIM_PWM_Init>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000aaa:	f7ff fe9d 	bl	80007e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ab6:	f107 031c 	add.w	r3, r7, #28
 8000aba:	4619      	mov	r1, r3
 8000abc:	4816      	ldr	r0, [pc, #88]	; (8000b18 <MX_TIM4_Init+0xc4>)
 8000abe:	f002 fca1 	bl	8003404 <HAL_TIMEx_MasterConfigSynchronization>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000ac8:	f7ff fe8e 	bl	80007e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000acc:	2360      	movs	r3, #96	; 0x60
 8000ace:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10000;
 8000ad0:	f242 7310 	movw	r3, #10000	; 0x2710
 8000ad4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ada:	2300      	movs	r3, #0
 8000adc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ade:	463b      	mov	r3, r7
 8000ae0:	2208      	movs	r2, #8
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	480c      	ldr	r0, [pc, #48]	; (8000b18 <MX_TIM4_Init+0xc4>)
 8000ae6:	f001 fff1 	bl	8002acc <HAL_TIM_PWM_ConfigChannel>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8000af0:	f7ff fe7a 	bl	80007e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000af4:	463b      	mov	r3, r7
 8000af6:	220c      	movs	r2, #12
 8000af8:	4619      	mov	r1, r3
 8000afa:	4807      	ldr	r0, [pc, #28]	; (8000b18 <MX_TIM4_Init+0xc4>)
 8000afc:	f001 ffe6 	bl	8002acc <HAL_TIM_PWM_ConfigChannel>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 8000b06:	f7ff fe6f 	bl	80007e8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8000b0a:	4803      	ldr	r0, [pc, #12]	; (8000b18 <MX_TIM4_Init+0xc4>)
 8000b0c:	f000 f828 	bl	8000b60 <HAL_TIM_MspPostInit>

}
 8000b10:	bf00      	nop
 8000b12:	3728      	adds	r7, #40	; 0x28
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	2000015c 	.word	0x2000015c
 8000b1c:	40000800 	.word	0x40000800

08000b20 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b085      	sub	sp, #20
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a0a      	ldr	r2, [pc, #40]	; (8000b58 <HAL_TIM_PWM_MspInit+0x38>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d10b      	bne.n	8000b4a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000b32:	4b0a      	ldr	r3, [pc, #40]	; (8000b5c <HAL_TIM_PWM_MspInit+0x3c>)
 8000b34:	69db      	ldr	r3, [r3, #28]
 8000b36:	4a09      	ldr	r2, [pc, #36]	; (8000b5c <HAL_TIM_PWM_MspInit+0x3c>)
 8000b38:	f043 0304 	orr.w	r3, r3, #4
 8000b3c:	61d3      	str	r3, [r2, #28]
 8000b3e:	4b07      	ldr	r3, [pc, #28]	; (8000b5c <HAL_TIM_PWM_MspInit+0x3c>)
 8000b40:	69db      	ldr	r3, [r3, #28]
 8000b42:	f003 0304 	and.w	r3, r3, #4
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000b4a:	bf00      	nop
 8000b4c:	3714      	adds	r7, #20
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	40000800 	.word	0x40000800
 8000b5c:	40021000 	.word	0x40021000

08000b60 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b088      	sub	sp, #32
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b68:	f107 030c 	add.w	r3, r7, #12
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a11      	ldr	r2, [pc, #68]	; (8000bc4 <HAL_TIM_MspPostInit+0x64>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d11c      	bne.n	8000bbc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b82:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <HAL_TIM_MspPostInit+0x68>)
 8000b84:	695b      	ldr	r3, [r3, #20]
 8000b86:	4a10      	ldr	r2, [pc, #64]	; (8000bc8 <HAL_TIM_MspPostInit+0x68>)
 8000b88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b8c:	6153      	str	r3, [r2, #20]
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <HAL_TIM_MspPostInit+0x68>)
 8000b90:	695b      	ldr	r3, [r3, #20]
 8000b92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b96:	60bb      	str	r3, [r7, #8]
 8000b98:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration    
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4 
    */
    GPIO_InitStruct.Pin = DRS_SIG_2_Pin|DRS_SIG_1_Pin;
 8000b9a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b9e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000bac:	2302      	movs	r3, #2
 8000bae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb0:	f107 030c 	add.w	r3, r7, #12
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4805      	ldr	r0, [pc, #20]	; (8000bcc <HAL_TIM_MspPostInit+0x6c>)
 8000bb8:	f000 fbb0 	bl	800131c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000bbc:	bf00      	nop
 8000bbe:	3720      	adds	r7, #32
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40000800 	.word	0x40000800
 8000bc8:	40021000 	.word	0x40021000
 8000bcc:	48000400 	.word	0x48000400

08000bd0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000bd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c08 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bd4:	480d      	ldr	r0, [pc, #52]	; (8000c0c <LoopForever+0x6>)
  ldr r1, =_edata
 8000bd6:	490e      	ldr	r1, [pc, #56]	; (8000c10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bd8:	4a0e      	ldr	r2, [pc, #56]	; (8000c14 <LoopForever+0xe>)
  movs r3, #0
 8000bda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bdc:	e002      	b.n	8000be4 <LoopCopyDataInit>

08000bde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000be0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000be2:	3304      	adds	r3, #4

08000be4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000be6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be8:	d3f9      	bcc.n	8000bde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bea:	4a0b      	ldr	r2, [pc, #44]	; (8000c18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bec:	4c0b      	ldr	r4, [pc, #44]	; (8000c1c <LoopForever+0x16>)
  movs r3, #0
 8000bee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bf0:	e001      	b.n	8000bf6 <LoopFillZerobss>

08000bf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf4:	3204      	adds	r2, #4

08000bf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf8:	d3fb      	bcc.n	8000bf2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000bfa:	f7ff ff19 	bl	8000a30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bfe:	f002 fc81 	bl	8003504 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c02:	f7ff fd79 	bl	80006f8 <main>

08000c06 <LoopForever>:

LoopForever:
    b LoopForever
 8000c06:	e7fe      	b.n	8000c06 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c08:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000c0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c10:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c14:	080035ac 	.word	0x080035ac
  ldr r2, =_sbss
 8000c18:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c1c:	200001ac 	.word	0x200001ac

08000c20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c20:	e7fe      	b.n	8000c20 <ADC1_2_IRQHandler>
	...

08000c24 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c28:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <HAL_Init+0x28>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a07      	ldr	r2, [pc, #28]	; (8000c4c <HAL_Init+0x28>)
 8000c2e:	f043 0310 	orr.w	r3, r3, #16
 8000c32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c34:	2003      	movs	r0, #3
 8000c36:	f000 fb3d 	bl	80012b4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c3a:	2000      	movs	r0, #0
 8000c3c:	f000 f808 	bl	8000c50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c40:	f7ff fea4 	bl	800098c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c44:	2300      	movs	r3, #0
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40022000 	.word	0x40022000

08000c50 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c58:	4b12      	ldr	r3, [pc, #72]	; (8000ca4 <HAL_InitTick+0x54>)
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	4b12      	ldr	r3, [pc, #72]	; (8000ca8 <HAL_InitTick+0x58>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	4619      	mov	r1, r3
 8000c62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f000 fb47 	bl	8001302 <HAL_SYSTICK_Config>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	e00e      	b.n	8000c9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2b0f      	cmp	r3, #15
 8000c82:	d80a      	bhi.n	8000c9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c84:	2200      	movs	r2, #0
 8000c86:	6879      	ldr	r1, [r7, #4]
 8000c88:	f04f 30ff 	mov.w	r0, #4294967295
 8000c8c:	f000 fb1d 	bl	80012ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c90:	4a06      	ldr	r2, [pc, #24]	; (8000cac <HAL_InitTick+0x5c>)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000c96:	2300      	movs	r3, #0
 8000c98:	e000      	b.n	8000c9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c9a:	2301      	movs	r3, #1
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3708      	adds	r7, #8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	20000000 	.word	0x20000000
 8000ca8:	20000008 	.word	0x20000008
 8000cac:	20000004 	.word	0x20000004

08000cb0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cb4:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <HAL_IncTick+0x20>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	461a      	mov	r2, r3
 8000cba:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <HAL_IncTick+0x24>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	4a04      	ldr	r2, [pc, #16]	; (8000cd4 <HAL_IncTick+0x24>)
 8000cc2:	6013      	str	r3, [r2, #0]
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	20000008 	.word	0x20000008
 8000cd4:	200001a8 	.word	0x200001a8

08000cd8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  return uwTick;  
 8000cdc:	4b03      	ldr	r3, [pc, #12]	; (8000cec <HAL_GetTick+0x14>)
 8000cde:	681b      	ldr	r3, [r3, #0]
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	200001a8 	.word	0x200001a8

08000cf0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d101      	bne.n	8000d02 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	e0ed      	b.n	8000ede <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d102      	bne.n	8000d14 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000d0e:	6878      	ldr	r0, [r7, #4]
 8000d10:	f7ff fc3a 	bl	8000588 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f022 0202 	bic.w	r2, r2, #2
 8000d22:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d24:	f7ff ffd8 	bl	8000cd8 <HAL_GetTick>
 8000d28:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d2a:	e012      	b.n	8000d52 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d2c:	f7ff ffd4 	bl	8000cd8 <HAL_GetTick>
 8000d30:	4602      	mov	r2, r0
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	2b0a      	cmp	r3, #10
 8000d38:	d90b      	bls.n	8000d52 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d3e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2205      	movs	r2, #5
 8000d4a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	e0c5      	b.n	8000ede <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	f003 0302 	and.w	r3, r3, #2
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d1e5      	bne.n	8000d2c <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f042 0201 	orr.w	r2, r2, #1
 8000d6e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d70:	f7ff ffb2 	bl	8000cd8 <HAL_GetTick>
 8000d74:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d76:	e012      	b.n	8000d9e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d78:	f7ff ffae 	bl	8000cd8 <HAL_GetTick>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	2b0a      	cmp	r3, #10
 8000d84:	d90b      	bls.n	8000d9e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d8a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2205      	movs	r2, #5
 8000d96:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e09f      	b.n	8000ede <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f003 0301 	and.w	r3, r3, #1
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d0e5      	beq.n	8000d78 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	7e1b      	ldrb	r3, [r3, #24]
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d108      	bne.n	8000dc6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	e007      	b.n	8000dd6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000dd4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	7e5b      	ldrb	r3, [r3, #25]
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d108      	bne.n	8000df0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	e007      	b.n	8000e00 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000dfe:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	7e9b      	ldrb	r3, [r3, #26]
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d108      	bne.n	8000e1a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f042 0220 	orr.w	r2, r2, #32
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	e007      	b.n	8000e2a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f022 0220 	bic.w	r2, r2, #32
 8000e28:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	7edb      	ldrb	r3, [r3, #27]
 8000e2e:	2b01      	cmp	r3, #1
 8000e30:	d108      	bne.n	8000e44 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f022 0210 	bic.w	r2, r2, #16
 8000e40:	601a      	str	r2, [r3, #0]
 8000e42:	e007      	b.n	8000e54 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f042 0210 	orr.w	r2, r2, #16
 8000e52:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	7f1b      	ldrb	r3, [r3, #28]
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d108      	bne.n	8000e6e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f042 0208 	orr.w	r2, r2, #8
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	e007      	b.n	8000e7e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f022 0208 	bic.w	r2, r2, #8
 8000e7c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	7f5b      	ldrb	r3, [r3, #29]
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d108      	bne.n	8000e98 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f042 0204 	orr.w	r2, r2, #4
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	e007      	b.n	8000ea8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f022 0204 	bic.w	r2, r2, #4
 8000ea6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	689a      	ldr	r2, [r3, #8]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	431a      	orrs	r2, r3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	691b      	ldr	r3, [r3, #16]
 8000eb6:	431a      	orrs	r2, r3
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	695b      	ldr	r3, [r3, #20]
 8000ebc:	ea42 0103 	orr.w	r1, r2, r3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	1e5a      	subs	r2, r3, #1
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	430a      	orrs	r2, r1
 8000ecc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000edc:	2300      	movs	r3, #0
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3710      	adds	r7, #16
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	b087      	sub	sp, #28
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
 8000eee:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000efc:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000efe:	7cfb      	ldrb	r3, [r7, #19]
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d003      	beq.n	8000f0c <HAL_CAN_ConfigFilter+0x26>
 8000f04:	7cfb      	ldrb	r3, [r7, #19]
 8000f06:	2b02      	cmp	r3, #2
 8000f08:	f040 80aa 	bne.w	8001060 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000f12:	f043 0201 	orr.w	r2, r3, #1
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	695b      	ldr	r3, [r3, #20]
 8000f20:	f003 031f 	and.w	r3, r3, #31
 8000f24:	2201      	movs	r2, #1
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	43db      	mvns	r3, r3
 8000f36:	401a      	ands	r2, r3
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	69db      	ldr	r3, [r3, #28]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d123      	bne.n	8000f8e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	43db      	mvns	r3, r3
 8000f50:	401a      	ands	r2, r3
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f64:	683a      	ldr	r2, [r7, #0]
 8000f66:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000f68:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	3248      	adds	r2, #72	; 0x48
 8000f6e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	689b      	ldr	r3, [r3, #8]
 8000f76:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f82:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f84:	6979      	ldr	r1, [r7, #20]
 8000f86:	3348      	adds	r3, #72	; 0x48
 8000f88:	00db      	lsls	r3, r3, #3
 8000f8a:	440b      	add	r3, r1
 8000f8c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	69db      	ldr	r3, [r3, #28]
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d122      	bne.n	8000fdc <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	431a      	orrs	r2, r3
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000fb2:	683a      	ldr	r2, [r7, #0]
 8000fb4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000fb6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	3248      	adds	r2, #72	; 0x48
 8000fbc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	689b      	ldr	r3, [r3, #8]
 8000fc4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	68db      	ldr	r3, [r3, #12]
 8000fca:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000fd0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000fd2:	6979      	ldr	r1, [r7, #20]
 8000fd4:	3348      	adds	r3, #72	; 0x48
 8000fd6:	00db      	lsls	r3, r3, #3
 8000fd8:	440b      	add	r3, r1
 8000fda:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	699b      	ldr	r3, [r3, #24]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d109      	bne.n	8000ff8 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	43db      	mvns	r3, r3
 8000fee:	401a      	ands	r2, r3
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000ff6:	e007      	b.n	8001008 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	431a      	orrs	r2, r3
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	691b      	ldr	r3, [r3, #16]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d109      	bne.n	8001024 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	43db      	mvns	r3, r3
 800101a:	401a      	ands	r2, r3
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001022:	e007      	b.n	8001034 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	431a      	orrs	r2, r3
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	6a1b      	ldr	r3, [r3, #32]
 8001038:	2b01      	cmp	r3, #1
 800103a:	d107      	bne.n	800104c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	431a      	orrs	r2, r3
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001052:	f023 0201 	bic.w	r2, r3, #1
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800105c:	2300      	movs	r3, #0
 800105e:	e006      	b.n	800106e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001064:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800106c:	2301      	movs	r3, #1
  }
}
 800106e:	4618      	mov	r0, r3
 8001070:	371c      	adds	r7, #28
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr

0800107a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	b084      	sub	sp, #16
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001088:	b2db      	uxtb	r3, r3
 800108a:	2b01      	cmp	r3, #1
 800108c:	d12e      	bne.n	80010ec <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2202      	movs	r2, #2
 8001092:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f022 0201 	bic.w	r2, r2, #1
 80010a4:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80010a6:	f7ff fe17 	bl	8000cd8 <HAL_GetTick>
 80010aa:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80010ac:	e012      	b.n	80010d4 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010ae:	f7ff fe13 	bl	8000cd8 <HAL_GetTick>
 80010b2:	4602      	mov	r2, r0
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	1ad3      	subs	r3, r2, r3
 80010b8:	2b0a      	cmp	r3, #10
 80010ba:	d90b      	bls.n	80010d4 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2205      	movs	r2, #5
 80010cc:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80010d0:	2301      	movs	r3, #1
 80010d2:	e012      	b.n	80010fa <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f003 0301 	and.w	r3, r3, #1
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d1e5      	bne.n	80010ae <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2200      	movs	r2, #0
 80010e6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80010e8:	2300      	movs	r3, #0
 80010ea:	e006      	b.n	80010fa <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f0:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80010f8:	2301      	movs	r3, #1
  }
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3710      	adds	r7, #16
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001102:	b480      	push	{r7}
 8001104:	b085      	sub	sp, #20
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
 800110a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001112:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001114:	7bfb      	ldrb	r3, [r7, #15]
 8001116:	2b01      	cmp	r3, #1
 8001118:	d002      	beq.n	8001120 <HAL_CAN_ActivateNotification+0x1e>
 800111a:	7bfb      	ldrb	r3, [r7, #15]
 800111c:	2b02      	cmp	r3, #2
 800111e:	d109      	bne.n	8001134 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	6959      	ldr	r1, [r3, #20]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	683a      	ldr	r2, [r7, #0]
 800112c:	430a      	orrs	r2, r1
 800112e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001130:	2300      	movs	r3, #0
 8001132:	e006      	b.n	8001142 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001138:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001140:	2301      	movs	r3, #1
  }
}
 8001142:	4618      	mov	r0, r3
 8001144:	3714      	adds	r7, #20
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
	...

08001150 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001150:	b480      	push	{r7}
 8001152:	b085      	sub	sp, #20
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f003 0307 	and.w	r3, r3, #7
 800115e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001160:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <__NVIC_SetPriorityGrouping+0x44>)
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001166:	68ba      	ldr	r2, [r7, #8]
 8001168:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800116c:	4013      	ands	r3, r2
 800116e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001178:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800117c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001180:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001182:	4a04      	ldr	r2, [pc, #16]	; (8001194 <__NVIC_SetPriorityGrouping+0x44>)
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	60d3      	str	r3, [r2, #12]
}
 8001188:	bf00      	nop
 800118a:	3714      	adds	r7, #20
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	e000ed00 	.word	0xe000ed00

08001198 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800119c:	4b04      	ldr	r3, [pc, #16]	; (80011b0 <__NVIC_GetPriorityGrouping+0x18>)
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	0a1b      	lsrs	r3, r3, #8
 80011a2:	f003 0307 	and.w	r3, r3, #7
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	6039      	str	r1, [r7, #0]
 80011be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	db0a      	blt.n	80011de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	b2da      	uxtb	r2, r3
 80011cc:	490c      	ldr	r1, [pc, #48]	; (8001200 <__NVIC_SetPriority+0x4c>)
 80011ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d2:	0112      	lsls	r2, r2, #4
 80011d4:	b2d2      	uxtb	r2, r2
 80011d6:	440b      	add	r3, r1
 80011d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011dc:	e00a      	b.n	80011f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	b2da      	uxtb	r2, r3
 80011e2:	4908      	ldr	r1, [pc, #32]	; (8001204 <__NVIC_SetPriority+0x50>)
 80011e4:	79fb      	ldrb	r3, [r7, #7]
 80011e6:	f003 030f 	and.w	r3, r3, #15
 80011ea:	3b04      	subs	r3, #4
 80011ec:	0112      	lsls	r2, r2, #4
 80011ee:	b2d2      	uxtb	r2, r2
 80011f0:	440b      	add	r3, r1
 80011f2:	761a      	strb	r2, [r3, #24]
}
 80011f4:	bf00      	nop
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr
 8001200:	e000e100 	.word	0xe000e100
 8001204:	e000ed00 	.word	0xe000ed00

08001208 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001208:	b480      	push	{r7}
 800120a:	b089      	sub	sp, #36	; 0x24
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	f003 0307 	and.w	r3, r3, #7
 800121a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	f1c3 0307 	rsb	r3, r3, #7
 8001222:	2b04      	cmp	r3, #4
 8001224:	bf28      	it	cs
 8001226:	2304      	movcs	r3, #4
 8001228:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	3304      	adds	r3, #4
 800122e:	2b06      	cmp	r3, #6
 8001230:	d902      	bls.n	8001238 <NVIC_EncodePriority+0x30>
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	3b03      	subs	r3, #3
 8001236:	e000      	b.n	800123a <NVIC_EncodePriority+0x32>
 8001238:	2300      	movs	r3, #0
 800123a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800123c:	f04f 32ff 	mov.w	r2, #4294967295
 8001240:	69bb      	ldr	r3, [r7, #24]
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	43da      	mvns	r2, r3
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	401a      	ands	r2, r3
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001250:	f04f 31ff 	mov.w	r1, #4294967295
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	fa01 f303 	lsl.w	r3, r1, r3
 800125a:	43d9      	mvns	r1, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001260:	4313      	orrs	r3, r2
         );
}
 8001262:	4618      	mov	r0, r3
 8001264:	3724      	adds	r7, #36	; 0x24
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
	...

08001270 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	3b01      	subs	r3, #1
 800127c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001280:	d301      	bcc.n	8001286 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001282:	2301      	movs	r3, #1
 8001284:	e00f      	b.n	80012a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001286:	4a0a      	ldr	r2, [pc, #40]	; (80012b0 <SysTick_Config+0x40>)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	3b01      	subs	r3, #1
 800128c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800128e:	210f      	movs	r1, #15
 8001290:	f04f 30ff 	mov.w	r0, #4294967295
 8001294:	f7ff ff8e 	bl	80011b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001298:	4b05      	ldr	r3, [pc, #20]	; (80012b0 <SysTick_Config+0x40>)
 800129a:	2200      	movs	r2, #0
 800129c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800129e:	4b04      	ldr	r3, [pc, #16]	; (80012b0 <SysTick_Config+0x40>)
 80012a0:	2207      	movs	r2, #7
 80012a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012a4:	2300      	movs	r3, #0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	e000e010 	.word	0xe000e010

080012b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f7ff ff47 	bl	8001150 <__NVIC_SetPriorityGrouping>
}
 80012c2:	bf00      	nop
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b086      	sub	sp, #24
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	4603      	mov	r3, r0
 80012d2:	60b9      	str	r1, [r7, #8]
 80012d4:	607a      	str	r2, [r7, #4]
 80012d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012d8:	2300      	movs	r3, #0
 80012da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012dc:	f7ff ff5c 	bl	8001198 <__NVIC_GetPriorityGrouping>
 80012e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	68b9      	ldr	r1, [r7, #8]
 80012e6:	6978      	ldr	r0, [r7, #20]
 80012e8:	f7ff ff8e 	bl	8001208 <NVIC_EncodePriority>
 80012ec:	4602      	mov	r2, r0
 80012ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012f2:	4611      	mov	r1, r2
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff ff5d 	bl	80011b4 <__NVIC_SetPriority>
}
 80012fa:	bf00      	nop
 80012fc:	3718      	adds	r7, #24
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	b082      	sub	sp, #8
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f7ff ffb0 	bl	8001270 <SysTick_Config>
 8001310:	4603      	mov	r3, r0
}
 8001312:	4618      	mov	r0, r3
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
	...

0800131c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800131c:	b480      	push	{r7}
 800131e:	b087      	sub	sp, #28
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001326:	2300      	movs	r3, #0
 8001328:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800132a:	e154      	b.n	80015d6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	2101      	movs	r1, #1
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	fa01 f303 	lsl.w	r3, r1, r3
 8001338:	4013      	ands	r3, r2
 800133a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	2b00      	cmp	r3, #0
 8001340:	f000 8146 	beq.w	80015d0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	2b01      	cmp	r3, #1
 800134a:	d00b      	beq.n	8001364 <HAL_GPIO_Init+0x48>
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	2b02      	cmp	r3, #2
 8001352:	d007      	beq.n	8001364 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001358:	2b11      	cmp	r3, #17
 800135a:	d003      	beq.n	8001364 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	2b12      	cmp	r3, #18
 8001362:	d130      	bne.n	80013c6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	2203      	movs	r2, #3
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	43db      	mvns	r3, r3
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	4013      	ands	r3, r2
 800137a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	68da      	ldr	r2, [r3, #12]
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	693a      	ldr	r2, [r7, #16]
 800138a:	4313      	orrs	r3, r2
 800138c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	693a      	ldr	r2, [r7, #16]
 8001392:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800139a:	2201      	movs	r2, #1
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	43db      	mvns	r3, r3
 80013a4:	693a      	ldr	r2, [r7, #16]
 80013a6:	4013      	ands	r3, r2
 80013a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	091b      	lsrs	r3, r3, #4
 80013b0:	f003 0201 	and.w	r2, r3, #1
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	4313      	orrs	r3, r2
 80013be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	68db      	ldr	r3, [r3, #12]
 80013ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	2203      	movs	r2, #3
 80013d2:	fa02 f303 	lsl.w	r3, r2, r3
 80013d6:	43db      	mvns	r3, r3
 80013d8:	693a      	ldr	r2, [r7, #16]
 80013da:	4013      	ands	r3, r2
 80013dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	689a      	ldr	r2, [r3, #8]
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d003      	beq.n	8001406 <HAL_GPIO_Init+0xea>
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	2b12      	cmp	r3, #18
 8001404:	d123      	bne.n	800144e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	08da      	lsrs	r2, r3, #3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	3208      	adds	r2, #8
 800140e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001412:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	f003 0307 	and.w	r3, r3, #7
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	220f      	movs	r2, #15
 800141e:	fa02 f303 	lsl.w	r3, r2, r3
 8001422:	43db      	mvns	r3, r3
 8001424:	693a      	ldr	r2, [r7, #16]
 8001426:	4013      	ands	r3, r2
 8001428:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	691a      	ldr	r2, [r3, #16]
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	f003 0307 	and.w	r3, r3, #7
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	4313      	orrs	r3, r2
 800143e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	08da      	lsrs	r2, r3, #3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	3208      	adds	r2, #8
 8001448:	6939      	ldr	r1, [r7, #16]
 800144a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	2203      	movs	r2, #3
 800145a:	fa02 f303 	lsl.w	r3, r2, r3
 800145e:	43db      	mvns	r3, r3
 8001460:	693a      	ldr	r2, [r7, #16]
 8001462:	4013      	ands	r3, r2
 8001464:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f003 0203 	and.w	r2, r3, #3
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	4313      	orrs	r3, r2
 800147a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800148a:	2b00      	cmp	r3, #0
 800148c:	f000 80a0 	beq.w	80015d0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001490:	4b58      	ldr	r3, [pc, #352]	; (80015f4 <HAL_GPIO_Init+0x2d8>)
 8001492:	699b      	ldr	r3, [r3, #24]
 8001494:	4a57      	ldr	r2, [pc, #348]	; (80015f4 <HAL_GPIO_Init+0x2d8>)
 8001496:	f043 0301 	orr.w	r3, r3, #1
 800149a:	6193      	str	r3, [r2, #24]
 800149c:	4b55      	ldr	r3, [pc, #340]	; (80015f4 <HAL_GPIO_Init+0x2d8>)
 800149e:	699b      	ldr	r3, [r3, #24]
 80014a0:	f003 0301 	and.w	r3, r3, #1
 80014a4:	60bb      	str	r3, [r7, #8]
 80014a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014a8:	4a53      	ldr	r2, [pc, #332]	; (80015f8 <HAL_GPIO_Init+0x2dc>)
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	089b      	lsrs	r3, r3, #2
 80014ae:	3302      	adds	r3, #2
 80014b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	f003 0303 	and.w	r3, r3, #3
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	220f      	movs	r2, #15
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	43db      	mvns	r3, r3
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	4013      	ands	r3, r2
 80014ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80014d2:	d019      	beq.n	8001508 <HAL_GPIO_Init+0x1ec>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	4a49      	ldr	r2, [pc, #292]	; (80015fc <HAL_GPIO_Init+0x2e0>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d013      	beq.n	8001504 <HAL_GPIO_Init+0x1e8>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	4a48      	ldr	r2, [pc, #288]	; (8001600 <HAL_GPIO_Init+0x2e4>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d00d      	beq.n	8001500 <HAL_GPIO_Init+0x1e4>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	4a47      	ldr	r2, [pc, #284]	; (8001604 <HAL_GPIO_Init+0x2e8>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d007      	beq.n	80014fc <HAL_GPIO_Init+0x1e0>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	4a46      	ldr	r2, [pc, #280]	; (8001608 <HAL_GPIO_Init+0x2ec>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d101      	bne.n	80014f8 <HAL_GPIO_Init+0x1dc>
 80014f4:	2304      	movs	r3, #4
 80014f6:	e008      	b.n	800150a <HAL_GPIO_Init+0x1ee>
 80014f8:	2305      	movs	r3, #5
 80014fa:	e006      	b.n	800150a <HAL_GPIO_Init+0x1ee>
 80014fc:	2303      	movs	r3, #3
 80014fe:	e004      	b.n	800150a <HAL_GPIO_Init+0x1ee>
 8001500:	2302      	movs	r3, #2
 8001502:	e002      	b.n	800150a <HAL_GPIO_Init+0x1ee>
 8001504:	2301      	movs	r3, #1
 8001506:	e000      	b.n	800150a <HAL_GPIO_Init+0x1ee>
 8001508:	2300      	movs	r3, #0
 800150a:	697a      	ldr	r2, [r7, #20]
 800150c:	f002 0203 	and.w	r2, r2, #3
 8001510:	0092      	lsls	r2, r2, #2
 8001512:	4093      	lsls	r3, r2
 8001514:	693a      	ldr	r2, [r7, #16]
 8001516:	4313      	orrs	r3, r2
 8001518:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800151a:	4937      	ldr	r1, [pc, #220]	; (80015f8 <HAL_GPIO_Init+0x2dc>)
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	089b      	lsrs	r3, r3, #2
 8001520:	3302      	adds	r3, #2
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001528:	4b38      	ldr	r3, [pc, #224]	; (800160c <HAL_GPIO_Init+0x2f0>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	43db      	mvns	r3, r3
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	4013      	ands	r3, r2
 8001536:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001540:	2b00      	cmp	r3, #0
 8001542:	d003      	beq.n	800154c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001544:	693a      	ldr	r2, [r7, #16]
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	4313      	orrs	r3, r2
 800154a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800154c:	4a2f      	ldr	r2, [pc, #188]	; (800160c <HAL_GPIO_Init+0x2f0>)
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001552:	4b2e      	ldr	r3, [pc, #184]	; (800160c <HAL_GPIO_Init+0x2f0>)
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	43db      	mvns	r3, r3
 800155c:	693a      	ldr	r2, [r7, #16]
 800155e:	4013      	ands	r3, r2
 8001560:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d003      	beq.n	8001576 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800156e:	693a      	ldr	r2, [r7, #16]
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	4313      	orrs	r3, r2
 8001574:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001576:	4a25      	ldr	r2, [pc, #148]	; (800160c <HAL_GPIO_Init+0x2f0>)
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800157c:	4b23      	ldr	r3, [pc, #140]	; (800160c <HAL_GPIO_Init+0x2f0>)
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	43db      	mvns	r3, r3
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	4013      	ands	r3, r2
 800158a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001594:	2b00      	cmp	r3, #0
 8001596:	d003      	beq.n	80015a0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001598:	693a      	ldr	r2, [r7, #16]
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	4313      	orrs	r3, r2
 800159e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80015a0:	4a1a      	ldr	r2, [pc, #104]	; (800160c <HAL_GPIO_Init+0x2f0>)
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015a6:	4b19      	ldr	r3, [pc, #100]	; (800160c <HAL_GPIO_Init+0x2f0>)
 80015a8:	68db      	ldr	r3, [r3, #12]
 80015aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	43db      	mvns	r3, r3
 80015b0:	693a      	ldr	r2, [r7, #16]
 80015b2:	4013      	ands	r3, r2
 80015b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d003      	beq.n	80015ca <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80015ca:	4a10      	ldr	r2, [pc, #64]	; (800160c <HAL_GPIO_Init+0x2f0>)
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	3301      	adds	r3, #1
 80015d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	fa22 f303 	lsr.w	r3, r2, r3
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	f47f aea3 	bne.w	800132c <HAL_GPIO_Init+0x10>
  }
}
 80015e6:	bf00      	nop
 80015e8:	371c      	adds	r7, #28
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	40021000 	.word	0x40021000
 80015f8:	40010000 	.word	0x40010000
 80015fc:	48000400 	.word	0x48000400
 8001600:	48000800 	.word	0x48000800
 8001604:	48000c00 	.word	0x48000c00
 8001608:	48001000 	.word	0x48001000
 800160c:	40010400 	.word	0x40010400

08001610 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	460b      	mov	r3, r1
 800161a:	807b      	strh	r3, [r7, #2]
 800161c:	4613      	mov	r3, r2
 800161e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001620:	787b      	ldrb	r3, [r7, #1]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d003      	beq.n	800162e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001626:	887a      	ldrh	r2, [r7, #2]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800162c:	e002      	b.n	8001634 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800162e:	887a      	ldrh	r2, [r7, #2]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001634:	bf00      	nop
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001646:	af00      	add	r7, sp, #0
 8001648:	1d3b      	adds	r3, r7, #4
 800164a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800164c:	1d3b      	adds	r3, r7, #4
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d102      	bne.n	800165a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	f000 bef4 	b.w	8002442 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800165a:	1d3b      	adds	r3, r7, #4
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0301 	and.w	r3, r3, #1
 8001664:	2b00      	cmp	r3, #0
 8001666:	f000 816a 	beq.w	800193e <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800166a:	4bb3      	ldr	r3, [pc, #716]	; (8001938 <HAL_RCC_OscConfig+0x2f8>)
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f003 030c 	and.w	r3, r3, #12
 8001672:	2b04      	cmp	r3, #4
 8001674:	d00c      	beq.n	8001690 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001676:	4bb0      	ldr	r3, [pc, #704]	; (8001938 <HAL_RCC_OscConfig+0x2f8>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f003 030c 	and.w	r3, r3, #12
 800167e:	2b08      	cmp	r3, #8
 8001680:	d159      	bne.n	8001736 <HAL_RCC_OscConfig+0xf6>
 8001682:	4bad      	ldr	r3, [pc, #692]	; (8001938 <HAL_RCC_OscConfig+0x2f8>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800168a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800168e:	d152      	bne.n	8001736 <HAL_RCC_OscConfig+0xf6>
 8001690:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001694:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001698:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800169c:	fa93 f3a3 	rbit	r3, r3
 80016a0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80016a4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016a8:	fab3 f383 	clz	r3, r3
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	095b      	lsrs	r3, r3, #5
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	f043 0301 	orr.w	r3, r3, #1
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d102      	bne.n	80016c2 <HAL_RCC_OscConfig+0x82>
 80016bc:	4b9e      	ldr	r3, [pc, #632]	; (8001938 <HAL_RCC_OscConfig+0x2f8>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	e015      	b.n	80016ee <HAL_RCC_OscConfig+0xae>
 80016c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016c6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ca:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80016ce:	fa93 f3a3 	rbit	r3, r3
 80016d2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80016d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016da:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80016de:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80016e2:	fa93 f3a3 	rbit	r3, r3
 80016e6:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80016ea:	4b93      	ldr	r3, [pc, #588]	; (8001938 <HAL_RCC_OscConfig+0x2f8>)
 80016ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80016f2:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80016f6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80016fa:	fa92 f2a2 	rbit	r2, r2
 80016fe:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001702:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001706:	fab2 f282 	clz	r2, r2
 800170a:	b2d2      	uxtb	r2, r2
 800170c:	f042 0220 	orr.w	r2, r2, #32
 8001710:	b2d2      	uxtb	r2, r2
 8001712:	f002 021f 	and.w	r2, r2, #31
 8001716:	2101      	movs	r1, #1
 8001718:	fa01 f202 	lsl.w	r2, r1, r2
 800171c:	4013      	ands	r3, r2
 800171e:	2b00      	cmp	r3, #0
 8001720:	f000 810c 	beq.w	800193c <HAL_RCC_OscConfig+0x2fc>
 8001724:	1d3b      	adds	r3, r7, #4
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	2b00      	cmp	r3, #0
 800172c:	f040 8106 	bne.w	800193c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	f000 be86 	b.w	8002442 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001736:	1d3b      	adds	r3, r7, #4
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001740:	d106      	bne.n	8001750 <HAL_RCC_OscConfig+0x110>
 8001742:	4b7d      	ldr	r3, [pc, #500]	; (8001938 <HAL_RCC_OscConfig+0x2f8>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a7c      	ldr	r2, [pc, #496]	; (8001938 <HAL_RCC_OscConfig+0x2f8>)
 8001748:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800174c:	6013      	str	r3, [r2, #0]
 800174e:	e030      	b.n	80017b2 <HAL_RCC_OscConfig+0x172>
 8001750:	1d3b      	adds	r3, r7, #4
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d10c      	bne.n	8001774 <HAL_RCC_OscConfig+0x134>
 800175a:	4b77      	ldr	r3, [pc, #476]	; (8001938 <HAL_RCC_OscConfig+0x2f8>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a76      	ldr	r2, [pc, #472]	; (8001938 <HAL_RCC_OscConfig+0x2f8>)
 8001760:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001764:	6013      	str	r3, [r2, #0]
 8001766:	4b74      	ldr	r3, [pc, #464]	; (8001938 <HAL_RCC_OscConfig+0x2f8>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a73      	ldr	r2, [pc, #460]	; (8001938 <HAL_RCC_OscConfig+0x2f8>)
 800176c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001770:	6013      	str	r3, [r2, #0]
 8001772:	e01e      	b.n	80017b2 <HAL_RCC_OscConfig+0x172>
 8001774:	1d3b      	adds	r3, r7, #4
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800177e:	d10c      	bne.n	800179a <HAL_RCC_OscConfig+0x15a>
 8001780:	4b6d      	ldr	r3, [pc, #436]	; (8001938 <HAL_RCC_OscConfig+0x2f8>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a6c      	ldr	r2, [pc, #432]	; (8001938 <HAL_RCC_OscConfig+0x2f8>)
 8001786:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800178a:	6013      	str	r3, [r2, #0]
 800178c:	4b6a      	ldr	r3, [pc, #424]	; (8001938 <HAL_RCC_OscConfig+0x2f8>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a69      	ldr	r2, [pc, #420]	; (8001938 <HAL_RCC_OscConfig+0x2f8>)
 8001792:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001796:	6013      	str	r3, [r2, #0]
 8001798:	e00b      	b.n	80017b2 <HAL_RCC_OscConfig+0x172>
 800179a:	4b67      	ldr	r3, [pc, #412]	; (8001938 <HAL_RCC_OscConfig+0x2f8>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a66      	ldr	r2, [pc, #408]	; (8001938 <HAL_RCC_OscConfig+0x2f8>)
 80017a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017a4:	6013      	str	r3, [r2, #0]
 80017a6:	4b64      	ldr	r3, [pc, #400]	; (8001938 <HAL_RCC_OscConfig+0x2f8>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a63      	ldr	r2, [pc, #396]	; (8001938 <HAL_RCC_OscConfig+0x2f8>)
 80017ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017b0:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80017b2:	4b61      	ldr	r3, [pc, #388]	; (8001938 <HAL_RCC_OscConfig+0x2f8>)
 80017b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b6:	f023 020f 	bic.w	r2, r3, #15
 80017ba:	1d3b      	adds	r3, r7, #4
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	495d      	ldr	r1, [pc, #372]	; (8001938 <HAL_RCC_OscConfig+0x2f8>)
 80017c2:	4313      	orrs	r3, r2
 80017c4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017c6:	1d3b      	adds	r3, r7, #4
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d059      	beq.n	8001884 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d0:	f7ff fa82 	bl	8000cd8 <HAL_GetTick>
 80017d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017d8:	e00a      	b.n	80017f0 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017da:	f7ff fa7d 	bl	8000cd8 <HAL_GetTick>
 80017de:	4602      	mov	r2, r0
 80017e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b64      	cmp	r3, #100	; 0x64
 80017e8:	d902      	bls.n	80017f0 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	f000 be29 	b.w	8002442 <HAL_RCC_OscConfig+0xe02>
 80017f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017f4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80017fc:	fa93 f3a3 	rbit	r3, r3
 8001800:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001804:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001808:	fab3 f383 	clz	r3, r3
 800180c:	b2db      	uxtb	r3, r3
 800180e:	095b      	lsrs	r3, r3, #5
 8001810:	b2db      	uxtb	r3, r3
 8001812:	f043 0301 	orr.w	r3, r3, #1
 8001816:	b2db      	uxtb	r3, r3
 8001818:	2b01      	cmp	r3, #1
 800181a:	d102      	bne.n	8001822 <HAL_RCC_OscConfig+0x1e2>
 800181c:	4b46      	ldr	r3, [pc, #280]	; (8001938 <HAL_RCC_OscConfig+0x2f8>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	e015      	b.n	800184e <HAL_RCC_OscConfig+0x20e>
 8001822:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001826:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800182a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800182e:	fa93 f3a3 	rbit	r3, r3
 8001832:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001836:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800183a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800183e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001842:	fa93 f3a3 	rbit	r3, r3
 8001846:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800184a:	4b3b      	ldr	r3, [pc, #236]	; (8001938 <HAL_RCC_OscConfig+0x2f8>)
 800184c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800184e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001852:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001856:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800185a:	fa92 f2a2 	rbit	r2, r2
 800185e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001862:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001866:	fab2 f282 	clz	r2, r2
 800186a:	b2d2      	uxtb	r2, r2
 800186c:	f042 0220 	orr.w	r2, r2, #32
 8001870:	b2d2      	uxtb	r2, r2
 8001872:	f002 021f 	and.w	r2, r2, #31
 8001876:	2101      	movs	r1, #1
 8001878:	fa01 f202 	lsl.w	r2, r1, r2
 800187c:	4013      	ands	r3, r2
 800187e:	2b00      	cmp	r3, #0
 8001880:	d0ab      	beq.n	80017da <HAL_RCC_OscConfig+0x19a>
 8001882:	e05c      	b.n	800193e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001884:	f7ff fa28 	bl	8000cd8 <HAL_GetTick>
 8001888:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800188c:	e00a      	b.n	80018a4 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800188e:	f7ff fa23 	bl	8000cd8 <HAL_GetTick>
 8001892:	4602      	mov	r2, r0
 8001894:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	2b64      	cmp	r3, #100	; 0x64
 800189c:	d902      	bls.n	80018a4 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	f000 bdcf 	b.w	8002442 <HAL_RCC_OscConfig+0xe02>
 80018a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018a8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ac:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80018b0:	fa93 f3a3 	rbit	r3, r3
 80018b4:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80018b8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018bc:	fab3 f383 	clz	r3, r3
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	095b      	lsrs	r3, r3, #5
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	f043 0301 	orr.w	r3, r3, #1
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d102      	bne.n	80018d6 <HAL_RCC_OscConfig+0x296>
 80018d0:	4b19      	ldr	r3, [pc, #100]	; (8001938 <HAL_RCC_OscConfig+0x2f8>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	e015      	b.n	8001902 <HAL_RCC_OscConfig+0x2c2>
 80018d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018da:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018de:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80018e2:	fa93 f3a3 	rbit	r3, r3
 80018e6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80018ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018ee:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80018f2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80018f6:	fa93 f3a3 	rbit	r3, r3
 80018fa:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80018fe:	4b0e      	ldr	r3, [pc, #56]	; (8001938 <HAL_RCC_OscConfig+0x2f8>)
 8001900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001902:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001906:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800190a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800190e:	fa92 f2a2 	rbit	r2, r2
 8001912:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001916:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800191a:	fab2 f282 	clz	r2, r2
 800191e:	b2d2      	uxtb	r2, r2
 8001920:	f042 0220 	orr.w	r2, r2, #32
 8001924:	b2d2      	uxtb	r2, r2
 8001926:	f002 021f 	and.w	r2, r2, #31
 800192a:	2101      	movs	r1, #1
 800192c:	fa01 f202 	lsl.w	r2, r1, r2
 8001930:	4013      	ands	r3, r2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d1ab      	bne.n	800188e <HAL_RCC_OscConfig+0x24e>
 8001936:	e002      	b.n	800193e <HAL_RCC_OscConfig+0x2fe>
 8001938:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800193c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800193e:	1d3b      	adds	r3, r7, #4
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0302 	and.w	r3, r3, #2
 8001948:	2b00      	cmp	r3, #0
 800194a:	f000 816f 	beq.w	8001c2c <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800194e:	4bd0      	ldr	r3, [pc, #832]	; (8001c90 <HAL_RCC_OscConfig+0x650>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f003 030c 	and.w	r3, r3, #12
 8001956:	2b00      	cmp	r3, #0
 8001958:	d00b      	beq.n	8001972 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800195a:	4bcd      	ldr	r3, [pc, #820]	; (8001c90 <HAL_RCC_OscConfig+0x650>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f003 030c 	and.w	r3, r3, #12
 8001962:	2b08      	cmp	r3, #8
 8001964:	d16c      	bne.n	8001a40 <HAL_RCC_OscConfig+0x400>
 8001966:	4bca      	ldr	r3, [pc, #808]	; (8001c90 <HAL_RCC_OscConfig+0x650>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d166      	bne.n	8001a40 <HAL_RCC_OscConfig+0x400>
 8001972:	2302      	movs	r3, #2
 8001974:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001978:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800197c:	fa93 f3a3 	rbit	r3, r3
 8001980:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001984:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001988:	fab3 f383 	clz	r3, r3
 800198c:	b2db      	uxtb	r3, r3
 800198e:	095b      	lsrs	r3, r3, #5
 8001990:	b2db      	uxtb	r3, r3
 8001992:	f043 0301 	orr.w	r3, r3, #1
 8001996:	b2db      	uxtb	r3, r3
 8001998:	2b01      	cmp	r3, #1
 800199a:	d102      	bne.n	80019a2 <HAL_RCC_OscConfig+0x362>
 800199c:	4bbc      	ldr	r3, [pc, #752]	; (8001c90 <HAL_RCC_OscConfig+0x650>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	e013      	b.n	80019ca <HAL_RCC_OscConfig+0x38a>
 80019a2:	2302      	movs	r3, #2
 80019a4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a8:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80019ac:	fa93 f3a3 	rbit	r3, r3
 80019b0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80019b4:	2302      	movs	r3, #2
 80019b6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80019ba:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80019be:	fa93 f3a3 	rbit	r3, r3
 80019c2:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80019c6:	4bb2      	ldr	r3, [pc, #712]	; (8001c90 <HAL_RCC_OscConfig+0x650>)
 80019c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ca:	2202      	movs	r2, #2
 80019cc:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80019d0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80019d4:	fa92 f2a2 	rbit	r2, r2
 80019d8:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80019dc:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80019e0:	fab2 f282 	clz	r2, r2
 80019e4:	b2d2      	uxtb	r2, r2
 80019e6:	f042 0220 	orr.w	r2, r2, #32
 80019ea:	b2d2      	uxtb	r2, r2
 80019ec:	f002 021f 	and.w	r2, r2, #31
 80019f0:	2101      	movs	r1, #1
 80019f2:	fa01 f202 	lsl.w	r2, r1, r2
 80019f6:	4013      	ands	r3, r2
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d007      	beq.n	8001a0c <HAL_RCC_OscConfig+0x3cc>
 80019fc:	1d3b      	adds	r3, r7, #4
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	691b      	ldr	r3, [r3, #16]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d002      	beq.n	8001a0c <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	f000 bd1b 	b.w	8002442 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a0c:	4ba0      	ldr	r3, [pc, #640]	; (8001c90 <HAL_RCC_OscConfig+0x650>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a14:	1d3b      	adds	r3, r7, #4
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	695b      	ldr	r3, [r3, #20]
 8001a1a:	21f8      	movs	r1, #248	; 0xf8
 8001a1c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a20:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001a24:	fa91 f1a1 	rbit	r1, r1
 8001a28:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001a2c:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001a30:	fab1 f181 	clz	r1, r1
 8001a34:	b2c9      	uxtb	r1, r1
 8001a36:	408b      	lsls	r3, r1
 8001a38:	4995      	ldr	r1, [pc, #596]	; (8001c90 <HAL_RCC_OscConfig+0x650>)
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a3e:	e0f5      	b.n	8001c2c <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a40:	1d3b      	adds	r3, r7, #4
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	691b      	ldr	r3, [r3, #16]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	f000 8085 	beq.w	8001b56 <HAL_RCC_OscConfig+0x516>
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a52:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001a56:	fa93 f3a3 	rbit	r3, r3
 8001a5a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001a5e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a62:	fab3 f383 	clz	r3, r3
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a6c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	461a      	mov	r2, r3
 8001a74:	2301      	movs	r3, #1
 8001a76:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a78:	f7ff f92e 	bl	8000cd8 <HAL_GetTick>
 8001a7c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a80:	e00a      	b.n	8001a98 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a82:	f7ff f929 	bl	8000cd8 <HAL_GetTick>
 8001a86:	4602      	mov	r2, r0
 8001a88:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d902      	bls.n	8001a98 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	f000 bcd5 	b.w	8002442 <HAL_RCC_OscConfig+0xe02>
 8001a98:	2302      	movs	r3, #2
 8001a9a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001aa2:	fa93 f3a3 	rbit	r3, r3
 8001aa6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001aaa:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aae:	fab3 f383 	clz	r3, r3
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	095b      	lsrs	r3, r3, #5
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	f043 0301 	orr.w	r3, r3, #1
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d102      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x488>
 8001ac2:	4b73      	ldr	r3, [pc, #460]	; (8001c90 <HAL_RCC_OscConfig+0x650>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	e013      	b.n	8001af0 <HAL_RCC_OscConfig+0x4b0>
 8001ac8:	2302      	movs	r3, #2
 8001aca:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ace:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001ad2:	fa93 f3a3 	rbit	r3, r3
 8001ad6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001ada:	2302      	movs	r3, #2
 8001adc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001ae0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001ae4:	fa93 f3a3 	rbit	r3, r3
 8001ae8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001aec:	4b68      	ldr	r3, [pc, #416]	; (8001c90 <HAL_RCC_OscConfig+0x650>)
 8001aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af0:	2202      	movs	r2, #2
 8001af2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001af6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001afa:	fa92 f2a2 	rbit	r2, r2
 8001afe:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001b02:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001b06:	fab2 f282 	clz	r2, r2
 8001b0a:	b2d2      	uxtb	r2, r2
 8001b0c:	f042 0220 	orr.w	r2, r2, #32
 8001b10:	b2d2      	uxtb	r2, r2
 8001b12:	f002 021f 	and.w	r2, r2, #31
 8001b16:	2101      	movs	r1, #1
 8001b18:	fa01 f202 	lsl.w	r2, r1, r2
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d0af      	beq.n	8001a82 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b22:	4b5b      	ldr	r3, [pc, #364]	; (8001c90 <HAL_RCC_OscConfig+0x650>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b2a:	1d3b      	adds	r3, r7, #4
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	695b      	ldr	r3, [r3, #20]
 8001b30:	21f8      	movs	r1, #248	; 0xf8
 8001b32:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b36:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001b3a:	fa91 f1a1 	rbit	r1, r1
 8001b3e:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001b42:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001b46:	fab1 f181 	clz	r1, r1
 8001b4a:	b2c9      	uxtb	r1, r1
 8001b4c:	408b      	lsls	r3, r1
 8001b4e:	4950      	ldr	r1, [pc, #320]	; (8001c90 <HAL_RCC_OscConfig+0x650>)
 8001b50:	4313      	orrs	r3, r2
 8001b52:	600b      	str	r3, [r1, #0]
 8001b54:	e06a      	b.n	8001c2c <HAL_RCC_OscConfig+0x5ec>
 8001b56:	2301      	movs	r3, #1
 8001b58:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001b60:	fa93 f3a3 	rbit	r3, r3
 8001b64:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001b68:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b6c:	fab3 f383 	clz	r3, r3
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b76:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	2300      	movs	r3, #0
 8001b80:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b82:	f7ff f8a9 	bl	8000cd8 <HAL_GetTick>
 8001b86:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b8a:	e00a      	b.n	8001ba2 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b8c:	f7ff f8a4 	bl	8000cd8 <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d902      	bls.n	8001ba2 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	f000 bc50 	b.w	8002442 <HAL_RCC_OscConfig+0xe02>
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001bac:	fa93 f3a3 	rbit	r3, r3
 8001bb0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001bb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bb8:	fab3 f383 	clz	r3, r3
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	095b      	lsrs	r3, r3, #5
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	f043 0301 	orr.w	r3, r3, #1
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d102      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x592>
 8001bcc:	4b30      	ldr	r3, [pc, #192]	; (8001c90 <HAL_RCC_OscConfig+0x650>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	e013      	b.n	8001bfa <HAL_RCC_OscConfig+0x5ba>
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001bdc:	fa93 f3a3 	rbit	r3, r3
 8001be0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001be4:	2302      	movs	r3, #2
 8001be6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001bea:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001bee:	fa93 f3a3 	rbit	r3, r3
 8001bf2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001bf6:	4b26      	ldr	r3, [pc, #152]	; (8001c90 <HAL_RCC_OscConfig+0x650>)
 8001bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfa:	2202      	movs	r2, #2
 8001bfc:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001c00:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001c04:	fa92 f2a2 	rbit	r2, r2
 8001c08:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001c0c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001c10:	fab2 f282 	clz	r2, r2
 8001c14:	b2d2      	uxtb	r2, r2
 8001c16:	f042 0220 	orr.w	r2, r2, #32
 8001c1a:	b2d2      	uxtb	r2, r2
 8001c1c:	f002 021f 	and.w	r2, r2, #31
 8001c20:	2101      	movs	r1, #1
 8001c22:	fa01 f202 	lsl.w	r2, r1, r2
 8001c26:	4013      	ands	r3, r2
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d1af      	bne.n	8001b8c <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c2c:	1d3b      	adds	r3, r7, #4
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0308 	and.w	r3, r3, #8
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	f000 80da 	beq.w	8001df0 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c3c:	1d3b      	adds	r3, r7, #4
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	699b      	ldr	r3, [r3, #24]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d069      	beq.n	8001d1a <HAL_RCC_OscConfig+0x6da>
 8001c46:	2301      	movs	r3, #1
 8001c48:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c4c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001c50:	fa93 f3a3 	rbit	r3, r3
 8001c54:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001c58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c5c:	fab3 f383 	clz	r3, r3
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	461a      	mov	r2, r3
 8001c64:	4b0b      	ldr	r3, [pc, #44]	; (8001c94 <HAL_RCC_OscConfig+0x654>)
 8001c66:	4413      	add	r3, r2
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c70:	f7ff f832 	bl	8000cd8 <HAL_GetTick>
 8001c74:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c78:	e00e      	b.n	8001c98 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c7a:	f7ff f82d 	bl	8000cd8 <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d906      	bls.n	8001c98 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e3d9      	b.n	8002442 <HAL_RCC_OscConfig+0xe02>
 8001c8e:	bf00      	nop
 8001c90:	40021000 	.word	0x40021000
 8001c94:	10908120 	.word	0x10908120
 8001c98:	2302      	movs	r3, #2
 8001c9a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001ca2:	fa93 f3a3 	rbit	r3, r3
 8001ca6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001caa:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001cae:	2202      	movs	r2, #2
 8001cb0:	601a      	str	r2, [r3, #0]
 8001cb2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	fa93 f2a3 	rbit	r2, r3
 8001cbc:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001cc0:	601a      	str	r2, [r3, #0]
 8001cc2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001cc6:	2202      	movs	r2, #2
 8001cc8:	601a      	str	r2, [r3, #0]
 8001cca:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	fa93 f2a3 	rbit	r2, r3
 8001cd4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001cd8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cda:	4ba5      	ldr	r3, [pc, #660]	; (8001f70 <HAL_RCC_OscConfig+0x930>)
 8001cdc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cde:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001ce2:	2102      	movs	r1, #2
 8001ce4:	6019      	str	r1, [r3, #0]
 8001ce6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	fa93 f1a3 	rbit	r1, r3
 8001cf0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001cf4:	6019      	str	r1, [r3, #0]
  return result;
 8001cf6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	fab3 f383 	clz	r3, r3
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	f003 031f 	and.w	r3, r3, #31
 8001d0c:	2101      	movs	r1, #1
 8001d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d12:	4013      	ands	r3, r2
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d0b0      	beq.n	8001c7a <HAL_RCC_OscConfig+0x63a>
 8001d18:	e06a      	b.n	8001df0 <HAL_RCC_OscConfig+0x7b0>
 8001d1a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001d1e:	2201      	movs	r2, #1
 8001d20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d22:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	fa93 f2a3 	rbit	r2, r3
 8001d2c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001d30:	601a      	str	r2, [r3, #0]
  return result;
 8001d32:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001d36:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d38:	fab3 f383 	clz	r3, r3
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	461a      	mov	r2, r3
 8001d40:	4b8c      	ldr	r3, [pc, #560]	; (8001f74 <HAL_RCC_OscConfig+0x934>)
 8001d42:	4413      	add	r3, r2
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	461a      	mov	r2, r3
 8001d48:	2300      	movs	r3, #0
 8001d4a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d4c:	f7fe ffc4 	bl	8000cd8 <HAL_GetTick>
 8001d50:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d54:	e009      	b.n	8001d6a <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d56:	f7fe ffbf 	bl	8000cd8 <HAL_GetTick>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e36b      	b.n	8002442 <HAL_RCC_OscConfig+0xe02>
 8001d6a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001d6e:	2202      	movs	r2, #2
 8001d70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d72:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	fa93 f2a3 	rbit	r2, r3
 8001d7c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001d80:	601a      	str	r2, [r3, #0]
 8001d82:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001d86:	2202      	movs	r2, #2
 8001d88:	601a      	str	r2, [r3, #0]
 8001d8a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	fa93 f2a3 	rbit	r2, r3
 8001d94:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001d98:	601a      	str	r2, [r3, #0]
 8001d9a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001d9e:	2202      	movs	r2, #2
 8001da0:	601a      	str	r2, [r3, #0]
 8001da2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	fa93 f2a3 	rbit	r2, r3
 8001dac:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001db0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001db2:	4b6f      	ldr	r3, [pc, #444]	; (8001f70 <HAL_RCC_OscConfig+0x930>)
 8001db4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001db6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001dba:	2102      	movs	r1, #2
 8001dbc:	6019      	str	r1, [r3, #0]
 8001dbe:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	fa93 f1a3 	rbit	r1, r3
 8001dc8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001dcc:	6019      	str	r1, [r3, #0]
  return result;
 8001dce:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	fab3 f383 	clz	r3, r3
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	f003 031f 	and.w	r3, r3, #31
 8001de4:	2101      	movs	r1, #1
 8001de6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dea:	4013      	ands	r3, r2
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d1b2      	bne.n	8001d56 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001df0:	1d3b      	adds	r3, r7, #4
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0304 	and.w	r3, r3, #4
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	f000 8158 	beq.w	80020b0 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e00:	2300      	movs	r3, #0
 8001e02:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e06:	4b5a      	ldr	r3, [pc, #360]	; (8001f70 <HAL_RCC_OscConfig+0x930>)
 8001e08:	69db      	ldr	r3, [r3, #28]
 8001e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d112      	bne.n	8001e38 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e12:	4b57      	ldr	r3, [pc, #348]	; (8001f70 <HAL_RCC_OscConfig+0x930>)
 8001e14:	69db      	ldr	r3, [r3, #28]
 8001e16:	4a56      	ldr	r2, [pc, #344]	; (8001f70 <HAL_RCC_OscConfig+0x930>)
 8001e18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e1c:	61d3      	str	r3, [r2, #28]
 8001e1e:	4b54      	ldr	r3, [pc, #336]	; (8001f70 <HAL_RCC_OscConfig+0x930>)
 8001e20:	69db      	ldr	r3, [r3, #28]
 8001e22:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001e26:	f107 0308 	add.w	r3, r7, #8
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	f107 0308 	add.w	r3, r7, #8
 8001e30:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001e32:	2301      	movs	r3, #1
 8001e34:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e38:	4b4f      	ldr	r3, [pc, #316]	; (8001f78 <HAL_RCC_OscConfig+0x938>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d11a      	bne.n	8001e7a <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e44:	4b4c      	ldr	r3, [pc, #304]	; (8001f78 <HAL_RCC_OscConfig+0x938>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a4b      	ldr	r2, [pc, #300]	; (8001f78 <HAL_RCC_OscConfig+0x938>)
 8001e4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e4e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e50:	f7fe ff42 	bl	8000cd8 <HAL_GetTick>
 8001e54:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e58:	e009      	b.n	8001e6e <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e5a:	f7fe ff3d 	bl	8000cd8 <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b64      	cmp	r3, #100	; 0x64
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e2e9      	b.n	8002442 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e6e:	4b42      	ldr	r3, [pc, #264]	; (8001f78 <HAL_RCC_OscConfig+0x938>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d0ef      	beq.n	8001e5a <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e7a:	1d3b      	adds	r3, r7, #4
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d106      	bne.n	8001e92 <HAL_RCC_OscConfig+0x852>
 8001e84:	4b3a      	ldr	r3, [pc, #232]	; (8001f70 <HAL_RCC_OscConfig+0x930>)
 8001e86:	6a1b      	ldr	r3, [r3, #32]
 8001e88:	4a39      	ldr	r2, [pc, #228]	; (8001f70 <HAL_RCC_OscConfig+0x930>)
 8001e8a:	f043 0301 	orr.w	r3, r3, #1
 8001e8e:	6213      	str	r3, [r2, #32]
 8001e90:	e02f      	b.n	8001ef2 <HAL_RCC_OscConfig+0x8b2>
 8001e92:	1d3b      	adds	r3, r7, #4
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d10c      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x876>
 8001e9c:	4b34      	ldr	r3, [pc, #208]	; (8001f70 <HAL_RCC_OscConfig+0x930>)
 8001e9e:	6a1b      	ldr	r3, [r3, #32]
 8001ea0:	4a33      	ldr	r2, [pc, #204]	; (8001f70 <HAL_RCC_OscConfig+0x930>)
 8001ea2:	f023 0301 	bic.w	r3, r3, #1
 8001ea6:	6213      	str	r3, [r2, #32]
 8001ea8:	4b31      	ldr	r3, [pc, #196]	; (8001f70 <HAL_RCC_OscConfig+0x930>)
 8001eaa:	6a1b      	ldr	r3, [r3, #32]
 8001eac:	4a30      	ldr	r2, [pc, #192]	; (8001f70 <HAL_RCC_OscConfig+0x930>)
 8001eae:	f023 0304 	bic.w	r3, r3, #4
 8001eb2:	6213      	str	r3, [r2, #32]
 8001eb4:	e01d      	b.n	8001ef2 <HAL_RCC_OscConfig+0x8b2>
 8001eb6:	1d3b      	adds	r3, r7, #4
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	2b05      	cmp	r3, #5
 8001ebe:	d10c      	bne.n	8001eda <HAL_RCC_OscConfig+0x89a>
 8001ec0:	4b2b      	ldr	r3, [pc, #172]	; (8001f70 <HAL_RCC_OscConfig+0x930>)
 8001ec2:	6a1b      	ldr	r3, [r3, #32]
 8001ec4:	4a2a      	ldr	r2, [pc, #168]	; (8001f70 <HAL_RCC_OscConfig+0x930>)
 8001ec6:	f043 0304 	orr.w	r3, r3, #4
 8001eca:	6213      	str	r3, [r2, #32]
 8001ecc:	4b28      	ldr	r3, [pc, #160]	; (8001f70 <HAL_RCC_OscConfig+0x930>)
 8001ece:	6a1b      	ldr	r3, [r3, #32]
 8001ed0:	4a27      	ldr	r2, [pc, #156]	; (8001f70 <HAL_RCC_OscConfig+0x930>)
 8001ed2:	f043 0301 	orr.w	r3, r3, #1
 8001ed6:	6213      	str	r3, [r2, #32]
 8001ed8:	e00b      	b.n	8001ef2 <HAL_RCC_OscConfig+0x8b2>
 8001eda:	4b25      	ldr	r3, [pc, #148]	; (8001f70 <HAL_RCC_OscConfig+0x930>)
 8001edc:	6a1b      	ldr	r3, [r3, #32]
 8001ede:	4a24      	ldr	r2, [pc, #144]	; (8001f70 <HAL_RCC_OscConfig+0x930>)
 8001ee0:	f023 0301 	bic.w	r3, r3, #1
 8001ee4:	6213      	str	r3, [r2, #32]
 8001ee6:	4b22      	ldr	r3, [pc, #136]	; (8001f70 <HAL_RCC_OscConfig+0x930>)
 8001ee8:	6a1b      	ldr	r3, [r3, #32]
 8001eea:	4a21      	ldr	r2, [pc, #132]	; (8001f70 <HAL_RCC_OscConfig+0x930>)
 8001eec:	f023 0304 	bic.w	r3, r3, #4
 8001ef0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ef2:	1d3b      	adds	r3, r7, #4
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d06b      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001efc:	f7fe feec 	bl	8000cd8 <HAL_GetTick>
 8001f00:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f04:	e00b      	b.n	8001f1e <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f06:	f7fe fee7 	bl	8000cd8 <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e291      	b.n	8002442 <HAL_RCC_OscConfig+0xe02>
 8001f1e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001f22:	2202      	movs	r2, #2
 8001f24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f26:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	fa93 f2a3 	rbit	r2, r3
 8001f30:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001f34:	601a      	str	r2, [r3, #0]
 8001f36:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001f3a:	2202      	movs	r2, #2
 8001f3c:	601a      	str	r2, [r3, #0]
 8001f3e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	fa93 f2a3 	rbit	r2, r3
 8001f48:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001f4c:	601a      	str	r2, [r3, #0]
  return result;
 8001f4e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001f52:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f54:	fab3 f383 	clz	r3, r3
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	095b      	lsrs	r3, r3, #5
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	f043 0302 	orr.w	r3, r3, #2
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d109      	bne.n	8001f7c <HAL_RCC_OscConfig+0x93c>
 8001f68:	4b01      	ldr	r3, [pc, #4]	; (8001f70 <HAL_RCC_OscConfig+0x930>)
 8001f6a:	6a1b      	ldr	r3, [r3, #32]
 8001f6c:	e014      	b.n	8001f98 <HAL_RCC_OscConfig+0x958>
 8001f6e:	bf00      	nop
 8001f70:	40021000 	.word	0x40021000
 8001f74:	10908120 	.word	0x10908120
 8001f78:	40007000 	.word	0x40007000
 8001f7c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001f80:	2202      	movs	r2, #2
 8001f82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f84:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	fa93 f2a3 	rbit	r2, r3
 8001f8e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	4bbb      	ldr	r3, [pc, #748]	; (8002284 <HAL_RCC_OscConfig+0xc44>)
 8001f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f98:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001f9c:	2102      	movs	r1, #2
 8001f9e:	6011      	str	r1, [r2, #0]
 8001fa0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001fa4:	6812      	ldr	r2, [r2, #0]
 8001fa6:	fa92 f1a2 	rbit	r1, r2
 8001faa:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001fae:	6011      	str	r1, [r2, #0]
  return result;
 8001fb0:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001fb4:	6812      	ldr	r2, [r2, #0]
 8001fb6:	fab2 f282 	clz	r2, r2
 8001fba:	b2d2      	uxtb	r2, r2
 8001fbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fc0:	b2d2      	uxtb	r2, r2
 8001fc2:	f002 021f 	and.w	r2, r2, #31
 8001fc6:	2101      	movs	r1, #1
 8001fc8:	fa01 f202 	lsl.w	r2, r1, r2
 8001fcc:	4013      	ands	r3, r2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d099      	beq.n	8001f06 <HAL_RCC_OscConfig+0x8c6>
 8001fd2:	e063      	b.n	800209c <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fd4:	f7fe fe80 	bl	8000cd8 <HAL_GetTick>
 8001fd8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fdc:	e00b      	b.n	8001ff6 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fde:	f7fe fe7b 	bl	8000cd8 <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e225      	b.n	8002442 <HAL_RCC_OscConfig+0xe02>
 8001ff6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001ffa:	2202      	movs	r2, #2
 8001ffc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ffe:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	fa93 f2a3 	rbit	r2, r3
 8002008:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800200c:	601a      	str	r2, [r3, #0]
 800200e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002012:	2202      	movs	r2, #2
 8002014:	601a      	str	r2, [r3, #0]
 8002016:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	fa93 f2a3 	rbit	r2, r3
 8002020:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002024:	601a      	str	r2, [r3, #0]
  return result;
 8002026:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800202a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800202c:	fab3 f383 	clz	r3, r3
 8002030:	b2db      	uxtb	r3, r3
 8002032:	095b      	lsrs	r3, r3, #5
 8002034:	b2db      	uxtb	r3, r3
 8002036:	f043 0302 	orr.w	r3, r3, #2
 800203a:	b2db      	uxtb	r3, r3
 800203c:	2b02      	cmp	r3, #2
 800203e:	d102      	bne.n	8002046 <HAL_RCC_OscConfig+0xa06>
 8002040:	4b90      	ldr	r3, [pc, #576]	; (8002284 <HAL_RCC_OscConfig+0xc44>)
 8002042:	6a1b      	ldr	r3, [r3, #32]
 8002044:	e00d      	b.n	8002062 <HAL_RCC_OscConfig+0xa22>
 8002046:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800204a:	2202      	movs	r2, #2
 800204c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	fa93 f2a3 	rbit	r2, r3
 8002058:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800205c:	601a      	str	r2, [r3, #0]
 800205e:	4b89      	ldr	r3, [pc, #548]	; (8002284 <HAL_RCC_OscConfig+0xc44>)
 8002060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002062:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002066:	2102      	movs	r1, #2
 8002068:	6011      	str	r1, [r2, #0]
 800206a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800206e:	6812      	ldr	r2, [r2, #0]
 8002070:	fa92 f1a2 	rbit	r1, r2
 8002074:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002078:	6011      	str	r1, [r2, #0]
  return result;
 800207a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800207e:	6812      	ldr	r2, [r2, #0]
 8002080:	fab2 f282 	clz	r2, r2
 8002084:	b2d2      	uxtb	r2, r2
 8002086:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800208a:	b2d2      	uxtb	r2, r2
 800208c:	f002 021f 	and.w	r2, r2, #31
 8002090:	2101      	movs	r1, #1
 8002092:	fa01 f202 	lsl.w	r2, r1, r2
 8002096:	4013      	ands	r3, r2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d1a0      	bne.n	8001fde <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800209c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d105      	bne.n	80020b0 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020a4:	4b77      	ldr	r3, [pc, #476]	; (8002284 <HAL_RCC_OscConfig+0xc44>)
 80020a6:	69db      	ldr	r3, [r3, #28]
 80020a8:	4a76      	ldr	r2, [pc, #472]	; (8002284 <HAL_RCC_OscConfig+0xc44>)
 80020aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020ae:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020b0:	1d3b      	adds	r3, r7, #4
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	69db      	ldr	r3, [r3, #28]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	f000 81c2 	beq.w	8002440 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020bc:	4b71      	ldr	r3, [pc, #452]	; (8002284 <HAL_RCC_OscConfig+0xc44>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f003 030c 	and.w	r3, r3, #12
 80020c4:	2b08      	cmp	r3, #8
 80020c6:	f000 819c 	beq.w	8002402 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020ca:	1d3b      	adds	r3, r7, #4
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	69db      	ldr	r3, [r3, #28]
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	f040 8114 	bne.w	80022fe <HAL_RCC_OscConfig+0xcbe>
 80020d6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80020da:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80020de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	fa93 f2a3 	rbit	r2, r3
 80020ea:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80020ee:	601a      	str	r2, [r3, #0]
  return result;
 80020f0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80020f4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020f6:	fab3 f383 	clz	r3, r3
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002100:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	461a      	mov	r2, r3
 8002108:	2300      	movs	r3, #0
 800210a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800210c:	f7fe fde4 	bl	8000cd8 <HAL_GetTick>
 8002110:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002114:	e009      	b.n	800212a <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002116:	f7fe fddf 	bl	8000cd8 <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b02      	cmp	r3, #2
 8002124:	d901      	bls.n	800212a <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e18b      	b.n	8002442 <HAL_RCC_OscConfig+0xe02>
 800212a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800212e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002132:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002134:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	fa93 f2a3 	rbit	r2, r3
 800213e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002142:	601a      	str	r2, [r3, #0]
  return result;
 8002144:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002148:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800214a:	fab3 f383 	clz	r3, r3
 800214e:	b2db      	uxtb	r3, r3
 8002150:	095b      	lsrs	r3, r3, #5
 8002152:	b2db      	uxtb	r3, r3
 8002154:	f043 0301 	orr.w	r3, r3, #1
 8002158:	b2db      	uxtb	r3, r3
 800215a:	2b01      	cmp	r3, #1
 800215c:	d102      	bne.n	8002164 <HAL_RCC_OscConfig+0xb24>
 800215e:	4b49      	ldr	r3, [pc, #292]	; (8002284 <HAL_RCC_OscConfig+0xc44>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	e01b      	b.n	800219c <HAL_RCC_OscConfig+0xb5c>
 8002164:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002168:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800216c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	fa93 f2a3 	rbit	r2, r3
 8002178:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800217c:	601a      	str	r2, [r3, #0]
 800217e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002182:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	fa93 f2a3 	rbit	r2, r3
 8002192:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002196:	601a      	str	r2, [r3, #0]
 8002198:	4b3a      	ldr	r3, [pc, #232]	; (8002284 <HAL_RCC_OscConfig+0xc44>)
 800219a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80021a0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80021a4:	6011      	str	r1, [r2, #0]
 80021a6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80021aa:	6812      	ldr	r2, [r2, #0]
 80021ac:	fa92 f1a2 	rbit	r1, r2
 80021b0:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80021b4:	6011      	str	r1, [r2, #0]
  return result;
 80021b6:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80021ba:	6812      	ldr	r2, [r2, #0]
 80021bc:	fab2 f282 	clz	r2, r2
 80021c0:	b2d2      	uxtb	r2, r2
 80021c2:	f042 0220 	orr.w	r2, r2, #32
 80021c6:	b2d2      	uxtb	r2, r2
 80021c8:	f002 021f 	and.w	r2, r2, #31
 80021cc:	2101      	movs	r1, #1
 80021ce:	fa01 f202 	lsl.w	r2, r1, r2
 80021d2:	4013      	ands	r3, r2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d19e      	bne.n	8002116 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021d8:	4b2a      	ldr	r3, [pc, #168]	; (8002284 <HAL_RCC_OscConfig+0xc44>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80021e0:	1d3b      	adds	r3, r7, #4
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80021e6:	1d3b      	adds	r3, r7, #4
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	6a1b      	ldr	r3, [r3, #32]
 80021ec:	430b      	orrs	r3, r1
 80021ee:	4925      	ldr	r1, [pc, #148]	; (8002284 <HAL_RCC_OscConfig+0xc44>)
 80021f0:	4313      	orrs	r3, r2
 80021f2:	604b      	str	r3, [r1, #4]
 80021f4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80021f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80021fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	fa93 f2a3 	rbit	r2, r3
 8002208:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800220c:	601a      	str	r2, [r3, #0]
  return result;
 800220e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002212:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002214:	fab3 f383 	clz	r3, r3
 8002218:	b2db      	uxtb	r3, r3
 800221a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800221e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	461a      	mov	r2, r3
 8002226:	2301      	movs	r3, #1
 8002228:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800222a:	f7fe fd55 	bl	8000cd8 <HAL_GetTick>
 800222e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002232:	e009      	b.n	8002248 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002234:	f7fe fd50 	bl	8000cd8 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	2b02      	cmp	r3, #2
 8002242:	d901      	bls.n	8002248 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e0fc      	b.n	8002442 <HAL_RCC_OscConfig+0xe02>
 8002248:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800224c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002250:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002252:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	fa93 f2a3 	rbit	r2, r3
 800225c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002260:	601a      	str	r2, [r3, #0]
  return result;
 8002262:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002266:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002268:	fab3 f383 	clz	r3, r3
 800226c:	b2db      	uxtb	r3, r3
 800226e:	095b      	lsrs	r3, r3, #5
 8002270:	b2db      	uxtb	r3, r3
 8002272:	f043 0301 	orr.w	r3, r3, #1
 8002276:	b2db      	uxtb	r3, r3
 8002278:	2b01      	cmp	r3, #1
 800227a:	d105      	bne.n	8002288 <HAL_RCC_OscConfig+0xc48>
 800227c:	4b01      	ldr	r3, [pc, #4]	; (8002284 <HAL_RCC_OscConfig+0xc44>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	e01e      	b.n	80022c0 <HAL_RCC_OscConfig+0xc80>
 8002282:	bf00      	nop
 8002284:	40021000 	.word	0x40021000
 8002288:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800228c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002290:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002292:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	fa93 f2a3 	rbit	r2, r3
 800229c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80022a0:	601a      	str	r2, [r3, #0]
 80022a2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80022a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022aa:	601a      	str	r2, [r3, #0]
 80022ac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	fa93 f2a3 	rbit	r2, r3
 80022b6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	4b63      	ldr	r3, [pc, #396]	; (800244c <HAL_RCC_OscConfig+0xe0c>)
 80022be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022c4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80022c8:	6011      	str	r1, [r2, #0]
 80022ca:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022ce:	6812      	ldr	r2, [r2, #0]
 80022d0:	fa92 f1a2 	rbit	r1, r2
 80022d4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80022d8:	6011      	str	r1, [r2, #0]
  return result;
 80022da:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80022de:	6812      	ldr	r2, [r2, #0]
 80022e0:	fab2 f282 	clz	r2, r2
 80022e4:	b2d2      	uxtb	r2, r2
 80022e6:	f042 0220 	orr.w	r2, r2, #32
 80022ea:	b2d2      	uxtb	r2, r2
 80022ec:	f002 021f 	and.w	r2, r2, #31
 80022f0:	2101      	movs	r1, #1
 80022f2:	fa01 f202 	lsl.w	r2, r1, r2
 80022f6:	4013      	ands	r3, r2
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d09b      	beq.n	8002234 <HAL_RCC_OscConfig+0xbf4>
 80022fc:	e0a0      	b.n	8002440 <HAL_RCC_OscConfig+0xe00>
 80022fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002302:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002306:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002308:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	fa93 f2a3 	rbit	r2, r3
 8002312:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002316:	601a      	str	r2, [r3, #0]
  return result;
 8002318:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800231c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800231e:	fab3 f383 	clz	r3, r3
 8002322:	b2db      	uxtb	r3, r3
 8002324:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002328:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	461a      	mov	r2, r3
 8002330:	2300      	movs	r3, #0
 8002332:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002334:	f7fe fcd0 	bl	8000cd8 <HAL_GetTick>
 8002338:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800233c:	e009      	b.n	8002352 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800233e:	f7fe fccb 	bl	8000cd8 <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b02      	cmp	r3, #2
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e077      	b.n	8002442 <HAL_RCC_OscConfig+0xe02>
 8002352:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002356:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800235a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	fa93 f2a3 	rbit	r2, r3
 8002366:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800236a:	601a      	str	r2, [r3, #0]
  return result;
 800236c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002370:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002372:	fab3 f383 	clz	r3, r3
 8002376:	b2db      	uxtb	r3, r3
 8002378:	095b      	lsrs	r3, r3, #5
 800237a:	b2db      	uxtb	r3, r3
 800237c:	f043 0301 	orr.w	r3, r3, #1
 8002380:	b2db      	uxtb	r3, r3
 8002382:	2b01      	cmp	r3, #1
 8002384:	d102      	bne.n	800238c <HAL_RCC_OscConfig+0xd4c>
 8002386:	4b31      	ldr	r3, [pc, #196]	; (800244c <HAL_RCC_OscConfig+0xe0c>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	e01b      	b.n	80023c4 <HAL_RCC_OscConfig+0xd84>
 800238c:	f107 0320 	add.w	r3, r7, #32
 8002390:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002394:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002396:	f107 0320 	add.w	r3, r7, #32
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	fa93 f2a3 	rbit	r2, r3
 80023a0:	f107 031c 	add.w	r3, r7, #28
 80023a4:	601a      	str	r2, [r3, #0]
 80023a6:	f107 0318 	add.w	r3, r7, #24
 80023aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	f107 0318 	add.w	r3, r7, #24
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	fa93 f2a3 	rbit	r2, r3
 80023ba:	f107 0314 	add.w	r3, r7, #20
 80023be:	601a      	str	r2, [r3, #0]
 80023c0:	4b22      	ldr	r3, [pc, #136]	; (800244c <HAL_RCC_OscConfig+0xe0c>)
 80023c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c4:	f107 0210 	add.w	r2, r7, #16
 80023c8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80023cc:	6011      	str	r1, [r2, #0]
 80023ce:	f107 0210 	add.w	r2, r7, #16
 80023d2:	6812      	ldr	r2, [r2, #0]
 80023d4:	fa92 f1a2 	rbit	r1, r2
 80023d8:	f107 020c 	add.w	r2, r7, #12
 80023dc:	6011      	str	r1, [r2, #0]
  return result;
 80023de:	f107 020c 	add.w	r2, r7, #12
 80023e2:	6812      	ldr	r2, [r2, #0]
 80023e4:	fab2 f282 	clz	r2, r2
 80023e8:	b2d2      	uxtb	r2, r2
 80023ea:	f042 0220 	orr.w	r2, r2, #32
 80023ee:	b2d2      	uxtb	r2, r2
 80023f0:	f002 021f 	and.w	r2, r2, #31
 80023f4:	2101      	movs	r1, #1
 80023f6:	fa01 f202 	lsl.w	r2, r1, r2
 80023fa:	4013      	ands	r3, r2
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d19e      	bne.n	800233e <HAL_RCC_OscConfig+0xcfe>
 8002400:	e01e      	b.n	8002440 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002402:	1d3b      	adds	r3, r7, #4
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	69db      	ldr	r3, [r3, #28]
 8002408:	2b01      	cmp	r3, #1
 800240a:	d101      	bne.n	8002410 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e018      	b.n	8002442 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002410:	4b0e      	ldr	r3, [pc, #56]	; (800244c <HAL_RCC_OscConfig+0xe0c>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002418:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800241c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002420:	1d3b      	adds	r3, r7, #4
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	6a1b      	ldr	r3, [r3, #32]
 8002426:	429a      	cmp	r2, r3
 8002428:	d108      	bne.n	800243c <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800242a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800242e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002432:	1d3b      	adds	r3, r7, #4
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002438:	429a      	cmp	r2, r3
 800243a:	d001      	beq.n	8002440 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e000      	b.n	8002442 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	40021000 	.word	0x40021000

08002450 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b09e      	sub	sp, #120	; 0x78
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800245a:	2300      	movs	r3, #0
 800245c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d101      	bne.n	8002468 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e162      	b.n	800272e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002468:	4b90      	ldr	r3, [pc, #576]	; (80026ac <HAL_RCC_ClockConfig+0x25c>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0307 	and.w	r3, r3, #7
 8002470:	683a      	ldr	r2, [r7, #0]
 8002472:	429a      	cmp	r2, r3
 8002474:	d910      	bls.n	8002498 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002476:	4b8d      	ldr	r3, [pc, #564]	; (80026ac <HAL_RCC_ClockConfig+0x25c>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f023 0207 	bic.w	r2, r3, #7
 800247e:	498b      	ldr	r1, [pc, #556]	; (80026ac <HAL_RCC_ClockConfig+0x25c>)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	4313      	orrs	r3, r2
 8002484:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002486:	4b89      	ldr	r3, [pc, #548]	; (80026ac <HAL_RCC_ClockConfig+0x25c>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0307 	and.w	r3, r3, #7
 800248e:	683a      	ldr	r2, [r7, #0]
 8002490:	429a      	cmp	r2, r3
 8002492:	d001      	beq.n	8002498 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e14a      	b.n	800272e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0302 	and.w	r3, r3, #2
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d008      	beq.n	80024b6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024a4:	4b82      	ldr	r3, [pc, #520]	; (80026b0 <HAL_RCC_ClockConfig+0x260>)
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	497f      	ldr	r1, [pc, #508]	; (80026b0 <HAL_RCC_ClockConfig+0x260>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	2b00      	cmp	r3, #0
 80024c0:	f000 80dc 	beq.w	800267c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d13c      	bne.n	8002546 <HAL_RCC_ClockConfig+0xf6>
 80024cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024d0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024d4:	fa93 f3a3 	rbit	r3, r3
 80024d8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80024da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024dc:	fab3 f383 	clz	r3, r3
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	095b      	lsrs	r3, r3, #5
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	f043 0301 	orr.w	r3, r3, #1
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d102      	bne.n	80024f6 <HAL_RCC_ClockConfig+0xa6>
 80024f0:	4b6f      	ldr	r3, [pc, #444]	; (80026b0 <HAL_RCC_ClockConfig+0x260>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	e00f      	b.n	8002516 <HAL_RCC_ClockConfig+0xc6>
 80024f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024fa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024fe:	fa93 f3a3 	rbit	r3, r3
 8002502:	667b      	str	r3, [r7, #100]	; 0x64
 8002504:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002508:	663b      	str	r3, [r7, #96]	; 0x60
 800250a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800250c:	fa93 f3a3 	rbit	r3, r3
 8002510:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002512:	4b67      	ldr	r3, [pc, #412]	; (80026b0 <HAL_RCC_ClockConfig+0x260>)
 8002514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002516:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800251a:	65ba      	str	r2, [r7, #88]	; 0x58
 800251c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800251e:	fa92 f2a2 	rbit	r2, r2
 8002522:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002524:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002526:	fab2 f282 	clz	r2, r2
 800252a:	b2d2      	uxtb	r2, r2
 800252c:	f042 0220 	orr.w	r2, r2, #32
 8002530:	b2d2      	uxtb	r2, r2
 8002532:	f002 021f 	and.w	r2, r2, #31
 8002536:	2101      	movs	r1, #1
 8002538:	fa01 f202 	lsl.w	r2, r1, r2
 800253c:	4013      	ands	r3, r2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d17b      	bne.n	800263a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e0f3      	b.n	800272e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	2b02      	cmp	r3, #2
 800254c:	d13c      	bne.n	80025c8 <HAL_RCC_ClockConfig+0x178>
 800254e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002552:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002554:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002556:	fa93 f3a3 	rbit	r3, r3
 800255a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800255c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800255e:	fab3 f383 	clz	r3, r3
 8002562:	b2db      	uxtb	r3, r3
 8002564:	095b      	lsrs	r3, r3, #5
 8002566:	b2db      	uxtb	r3, r3
 8002568:	f043 0301 	orr.w	r3, r3, #1
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2b01      	cmp	r3, #1
 8002570:	d102      	bne.n	8002578 <HAL_RCC_ClockConfig+0x128>
 8002572:	4b4f      	ldr	r3, [pc, #316]	; (80026b0 <HAL_RCC_ClockConfig+0x260>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	e00f      	b.n	8002598 <HAL_RCC_ClockConfig+0x148>
 8002578:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800257c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002580:	fa93 f3a3 	rbit	r3, r3
 8002584:	647b      	str	r3, [r7, #68]	; 0x44
 8002586:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800258a:	643b      	str	r3, [r7, #64]	; 0x40
 800258c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800258e:	fa93 f3a3 	rbit	r3, r3
 8002592:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002594:	4b46      	ldr	r3, [pc, #280]	; (80026b0 <HAL_RCC_ClockConfig+0x260>)
 8002596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002598:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800259c:	63ba      	str	r2, [r7, #56]	; 0x38
 800259e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80025a0:	fa92 f2a2 	rbit	r2, r2
 80025a4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80025a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80025a8:	fab2 f282 	clz	r2, r2
 80025ac:	b2d2      	uxtb	r2, r2
 80025ae:	f042 0220 	orr.w	r2, r2, #32
 80025b2:	b2d2      	uxtb	r2, r2
 80025b4:	f002 021f 	and.w	r2, r2, #31
 80025b8:	2101      	movs	r1, #1
 80025ba:	fa01 f202 	lsl.w	r2, r1, r2
 80025be:	4013      	ands	r3, r2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d13a      	bne.n	800263a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e0b2      	b.n	800272e <HAL_RCC_ClockConfig+0x2de>
 80025c8:	2302      	movs	r3, #2
 80025ca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ce:	fa93 f3a3 	rbit	r3, r3
 80025d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80025d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025d6:	fab3 f383 	clz	r3, r3
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	095b      	lsrs	r3, r3, #5
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	f043 0301 	orr.w	r3, r3, #1
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d102      	bne.n	80025f0 <HAL_RCC_ClockConfig+0x1a0>
 80025ea:	4b31      	ldr	r3, [pc, #196]	; (80026b0 <HAL_RCC_ClockConfig+0x260>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	e00d      	b.n	800260c <HAL_RCC_ClockConfig+0x1bc>
 80025f0:	2302      	movs	r3, #2
 80025f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025f6:	fa93 f3a3 	rbit	r3, r3
 80025fa:	627b      	str	r3, [r7, #36]	; 0x24
 80025fc:	2302      	movs	r3, #2
 80025fe:	623b      	str	r3, [r7, #32]
 8002600:	6a3b      	ldr	r3, [r7, #32]
 8002602:	fa93 f3a3 	rbit	r3, r3
 8002606:	61fb      	str	r3, [r7, #28]
 8002608:	4b29      	ldr	r3, [pc, #164]	; (80026b0 <HAL_RCC_ClockConfig+0x260>)
 800260a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260c:	2202      	movs	r2, #2
 800260e:	61ba      	str	r2, [r7, #24]
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	fa92 f2a2 	rbit	r2, r2
 8002616:	617a      	str	r2, [r7, #20]
  return result;
 8002618:	697a      	ldr	r2, [r7, #20]
 800261a:	fab2 f282 	clz	r2, r2
 800261e:	b2d2      	uxtb	r2, r2
 8002620:	f042 0220 	orr.w	r2, r2, #32
 8002624:	b2d2      	uxtb	r2, r2
 8002626:	f002 021f 	and.w	r2, r2, #31
 800262a:	2101      	movs	r1, #1
 800262c:	fa01 f202 	lsl.w	r2, r1, r2
 8002630:	4013      	ands	r3, r2
 8002632:	2b00      	cmp	r3, #0
 8002634:	d101      	bne.n	800263a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e079      	b.n	800272e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800263a:	4b1d      	ldr	r3, [pc, #116]	; (80026b0 <HAL_RCC_ClockConfig+0x260>)
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f023 0203 	bic.w	r2, r3, #3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	491a      	ldr	r1, [pc, #104]	; (80026b0 <HAL_RCC_ClockConfig+0x260>)
 8002648:	4313      	orrs	r3, r2
 800264a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800264c:	f7fe fb44 	bl	8000cd8 <HAL_GetTick>
 8002650:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002652:	e00a      	b.n	800266a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002654:	f7fe fb40 	bl	8000cd8 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002662:	4293      	cmp	r3, r2
 8002664:	d901      	bls.n	800266a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e061      	b.n	800272e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800266a:	4b11      	ldr	r3, [pc, #68]	; (80026b0 <HAL_RCC_ClockConfig+0x260>)
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f003 020c 	and.w	r2, r3, #12
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	429a      	cmp	r2, r3
 800267a:	d1eb      	bne.n	8002654 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800267c:	4b0b      	ldr	r3, [pc, #44]	; (80026ac <HAL_RCC_ClockConfig+0x25c>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0307 	and.w	r3, r3, #7
 8002684:	683a      	ldr	r2, [r7, #0]
 8002686:	429a      	cmp	r2, r3
 8002688:	d214      	bcs.n	80026b4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800268a:	4b08      	ldr	r3, [pc, #32]	; (80026ac <HAL_RCC_ClockConfig+0x25c>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f023 0207 	bic.w	r2, r3, #7
 8002692:	4906      	ldr	r1, [pc, #24]	; (80026ac <HAL_RCC_ClockConfig+0x25c>)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	4313      	orrs	r3, r2
 8002698:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800269a:	4b04      	ldr	r3, [pc, #16]	; (80026ac <HAL_RCC_ClockConfig+0x25c>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0307 	and.w	r3, r3, #7
 80026a2:	683a      	ldr	r2, [r7, #0]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d005      	beq.n	80026b4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e040      	b.n	800272e <HAL_RCC_ClockConfig+0x2de>
 80026ac:	40022000 	.word	0x40022000
 80026b0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0304 	and.w	r3, r3, #4
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d008      	beq.n	80026d2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026c0:	4b1d      	ldr	r3, [pc, #116]	; (8002738 <HAL_RCC_ClockConfig+0x2e8>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	491a      	ldr	r1, [pc, #104]	; (8002738 <HAL_RCC_ClockConfig+0x2e8>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0308 	and.w	r3, r3, #8
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d009      	beq.n	80026f2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026de:	4b16      	ldr	r3, [pc, #88]	; (8002738 <HAL_RCC_ClockConfig+0x2e8>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	00db      	lsls	r3, r3, #3
 80026ec:	4912      	ldr	r1, [pc, #72]	; (8002738 <HAL_RCC_ClockConfig+0x2e8>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80026f2:	f000 f829 	bl	8002748 <HAL_RCC_GetSysClockFreq>
 80026f6:	4601      	mov	r1, r0
 80026f8:	4b0f      	ldr	r3, [pc, #60]	; (8002738 <HAL_RCC_ClockConfig+0x2e8>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002700:	22f0      	movs	r2, #240	; 0xf0
 8002702:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002704:	693a      	ldr	r2, [r7, #16]
 8002706:	fa92 f2a2 	rbit	r2, r2
 800270a:	60fa      	str	r2, [r7, #12]
  return result;
 800270c:	68fa      	ldr	r2, [r7, #12]
 800270e:	fab2 f282 	clz	r2, r2
 8002712:	b2d2      	uxtb	r2, r2
 8002714:	40d3      	lsrs	r3, r2
 8002716:	4a09      	ldr	r2, [pc, #36]	; (800273c <HAL_RCC_ClockConfig+0x2ec>)
 8002718:	5cd3      	ldrb	r3, [r2, r3]
 800271a:	fa21 f303 	lsr.w	r3, r1, r3
 800271e:	4a08      	ldr	r2, [pc, #32]	; (8002740 <HAL_RCC_ClockConfig+0x2f0>)
 8002720:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002722:	4b08      	ldr	r3, [pc, #32]	; (8002744 <HAL_RCC_ClockConfig+0x2f4>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4618      	mov	r0, r3
 8002728:	f7fe fa92 	bl	8000c50 <HAL_InitTick>
  
  return HAL_OK;
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3778      	adds	r7, #120	; 0x78
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	40021000 	.word	0x40021000
 800273c:	08003574 	.word	0x08003574
 8002740:	20000000 	.word	0x20000000
 8002744:	20000004 	.word	0x20000004

08002748 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002748:	b480      	push	{r7}
 800274a:	b08b      	sub	sp, #44	; 0x2c
 800274c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800274e:	2300      	movs	r3, #0
 8002750:	61fb      	str	r3, [r7, #28]
 8002752:	2300      	movs	r3, #0
 8002754:	61bb      	str	r3, [r7, #24]
 8002756:	2300      	movs	r3, #0
 8002758:	627b      	str	r3, [r7, #36]	; 0x24
 800275a:	2300      	movs	r3, #0
 800275c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800275e:	2300      	movs	r3, #0
 8002760:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002762:	4b29      	ldr	r3, [pc, #164]	; (8002808 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	f003 030c 	and.w	r3, r3, #12
 800276e:	2b04      	cmp	r3, #4
 8002770:	d002      	beq.n	8002778 <HAL_RCC_GetSysClockFreq+0x30>
 8002772:	2b08      	cmp	r3, #8
 8002774:	d003      	beq.n	800277e <HAL_RCC_GetSysClockFreq+0x36>
 8002776:	e03c      	b.n	80027f2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002778:	4b24      	ldr	r3, [pc, #144]	; (800280c <HAL_RCC_GetSysClockFreq+0xc4>)
 800277a:	623b      	str	r3, [r7, #32]
      break;
 800277c:	e03c      	b.n	80027f8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002784:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002788:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278a:	68ba      	ldr	r2, [r7, #8]
 800278c:	fa92 f2a2 	rbit	r2, r2
 8002790:	607a      	str	r2, [r7, #4]
  return result;
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	fab2 f282 	clz	r2, r2
 8002798:	b2d2      	uxtb	r2, r2
 800279a:	40d3      	lsrs	r3, r2
 800279c:	4a1c      	ldr	r2, [pc, #112]	; (8002810 <HAL_RCC_GetSysClockFreq+0xc8>)
 800279e:	5cd3      	ldrb	r3, [r2, r3]
 80027a0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80027a2:	4b19      	ldr	r3, [pc, #100]	; (8002808 <HAL_RCC_GetSysClockFreq+0xc0>)
 80027a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a6:	f003 030f 	and.w	r3, r3, #15
 80027aa:	220f      	movs	r2, #15
 80027ac:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ae:	693a      	ldr	r2, [r7, #16]
 80027b0:	fa92 f2a2 	rbit	r2, r2
 80027b4:	60fa      	str	r2, [r7, #12]
  return result;
 80027b6:	68fa      	ldr	r2, [r7, #12]
 80027b8:	fab2 f282 	clz	r2, r2
 80027bc:	b2d2      	uxtb	r2, r2
 80027be:	40d3      	lsrs	r3, r2
 80027c0:	4a14      	ldr	r2, [pc, #80]	; (8002814 <HAL_RCC_GetSysClockFreq+0xcc>)
 80027c2:	5cd3      	ldrb	r3, [r2, r3]
 80027c4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d008      	beq.n	80027e2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80027d0:	4a0e      	ldr	r2, [pc, #56]	; (800280c <HAL_RCC_GetSysClockFreq+0xc4>)
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	fb02 f303 	mul.w	r3, r2, r3
 80027de:	627b      	str	r3, [r7, #36]	; 0x24
 80027e0:	e004      	b.n	80027ec <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	4a0c      	ldr	r2, [pc, #48]	; (8002818 <HAL_RCC_GetSysClockFreq+0xd0>)
 80027e6:	fb02 f303 	mul.w	r3, r2, r3
 80027ea:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80027ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ee:	623b      	str	r3, [r7, #32]
      break;
 80027f0:	e002      	b.n	80027f8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027f2:	4b06      	ldr	r3, [pc, #24]	; (800280c <HAL_RCC_GetSysClockFreq+0xc4>)
 80027f4:	623b      	str	r3, [r7, #32]
      break;
 80027f6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027f8:	6a3b      	ldr	r3, [r7, #32]
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	372c      	adds	r7, #44	; 0x2c
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	40021000 	.word	0x40021000
 800280c:	007a1200 	.word	0x007a1200
 8002810:	08003584 	.word	0x08003584
 8002814:	08003594 	.word	0x08003594
 8002818:	003d0900 	.word	0x003d0900

0800281c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d101      	bne.n	800282e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e049      	b.n	80028c2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002834:	b2db      	uxtb	r3, r3
 8002836:	2b00      	cmp	r3, #0
 8002838:	d106      	bne.n	8002848 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f7fe f96c 	bl	8000b20 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2202      	movs	r2, #2
 800284c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	3304      	adds	r3, #4
 8002858:	4619      	mov	r1, r3
 800285a:	4610      	mov	r0, r2
 800285c:	f000 fa46 	bl	8002cec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3708      	adds	r7, #8
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
	...

080028cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d109      	bne.n	80028f0 <HAL_TIM_PWM_Start+0x24>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	bf14      	ite	ne
 80028e8:	2301      	movne	r3, #1
 80028ea:	2300      	moveq	r3, #0
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	e03c      	b.n	800296a <HAL_TIM_PWM_Start+0x9e>
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	2b04      	cmp	r3, #4
 80028f4:	d109      	bne.n	800290a <HAL_TIM_PWM_Start+0x3e>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b01      	cmp	r3, #1
 8002900:	bf14      	ite	ne
 8002902:	2301      	movne	r3, #1
 8002904:	2300      	moveq	r3, #0
 8002906:	b2db      	uxtb	r3, r3
 8002908:	e02f      	b.n	800296a <HAL_TIM_PWM_Start+0x9e>
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	2b08      	cmp	r3, #8
 800290e:	d109      	bne.n	8002924 <HAL_TIM_PWM_Start+0x58>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002916:	b2db      	uxtb	r3, r3
 8002918:	2b01      	cmp	r3, #1
 800291a:	bf14      	ite	ne
 800291c:	2301      	movne	r3, #1
 800291e:	2300      	moveq	r3, #0
 8002920:	b2db      	uxtb	r3, r3
 8002922:	e022      	b.n	800296a <HAL_TIM_PWM_Start+0x9e>
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	2b0c      	cmp	r3, #12
 8002928:	d109      	bne.n	800293e <HAL_TIM_PWM_Start+0x72>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002930:	b2db      	uxtb	r3, r3
 8002932:	2b01      	cmp	r3, #1
 8002934:	bf14      	ite	ne
 8002936:	2301      	movne	r3, #1
 8002938:	2300      	moveq	r3, #0
 800293a:	b2db      	uxtb	r3, r3
 800293c:	e015      	b.n	800296a <HAL_TIM_PWM_Start+0x9e>
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	2b10      	cmp	r3, #16
 8002942:	d109      	bne.n	8002958 <HAL_TIM_PWM_Start+0x8c>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800294a:	b2db      	uxtb	r3, r3
 800294c:	2b01      	cmp	r3, #1
 800294e:	bf14      	ite	ne
 8002950:	2301      	movne	r3, #1
 8002952:	2300      	moveq	r3, #0
 8002954:	b2db      	uxtb	r3, r3
 8002956:	e008      	b.n	800296a <HAL_TIM_PWM_Start+0x9e>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800295e:	b2db      	uxtb	r3, r3
 8002960:	2b01      	cmp	r3, #1
 8002962:	bf14      	ite	ne
 8002964:	2301      	movne	r3, #1
 8002966:	2300      	moveq	r3, #0
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e097      	b.n	8002aa2 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d104      	bne.n	8002982 <HAL_TIM_PWM_Start+0xb6>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2202      	movs	r2, #2
 800297c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002980:	e023      	b.n	80029ca <HAL_TIM_PWM_Start+0xfe>
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	2b04      	cmp	r3, #4
 8002986:	d104      	bne.n	8002992 <HAL_TIM_PWM_Start+0xc6>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2202      	movs	r2, #2
 800298c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002990:	e01b      	b.n	80029ca <HAL_TIM_PWM_Start+0xfe>
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	2b08      	cmp	r3, #8
 8002996:	d104      	bne.n	80029a2 <HAL_TIM_PWM_Start+0xd6>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2202      	movs	r2, #2
 800299c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029a0:	e013      	b.n	80029ca <HAL_TIM_PWM_Start+0xfe>
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	2b0c      	cmp	r3, #12
 80029a6:	d104      	bne.n	80029b2 <HAL_TIM_PWM_Start+0xe6>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2202      	movs	r2, #2
 80029ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80029b0:	e00b      	b.n	80029ca <HAL_TIM_PWM_Start+0xfe>
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	2b10      	cmp	r3, #16
 80029b6:	d104      	bne.n	80029c2 <HAL_TIM_PWM_Start+0xf6>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2202      	movs	r2, #2
 80029bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029c0:	e003      	b.n	80029ca <HAL_TIM_PWM_Start+0xfe>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2202      	movs	r2, #2
 80029c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2201      	movs	r2, #1
 80029d0:	6839      	ldr	r1, [r7, #0]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f000 fcf0 	bl	80033b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a33      	ldr	r2, [pc, #204]	; (8002aac <HAL_TIM_PWM_Start+0x1e0>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d013      	beq.n	8002a0a <HAL_TIM_PWM_Start+0x13e>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a32      	ldr	r2, [pc, #200]	; (8002ab0 <HAL_TIM_PWM_Start+0x1e4>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d00e      	beq.n	8002a0a <HAL_TIM_PWM_Start+0x13e>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a30      	ldr	r2, [pc, #192]	; (8002ab4 <HAL_TIM_PWM_Start+0x1e8>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d009      	beq.n	8002a0a <HAL_TIM_PWM_Start+0x13e>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a2f      	ldr	r2, [pc, #188]	; (8002ab8 <HAL_TIM_PWM_Start+0x1ec>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d004      	beq.n	8002a0a <HAL_TIM_PWM_Start+0x13e>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a2d      	ldr	r2, [pc, #180]	; (8002abc <HAL_TIM_PWM_Start+0x1f0>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d101      	bne.n	8002a0e <HAL_TIM_PWM_Start+0x142>
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e000      	b.n	8002a10 <HAL_TIM_PWM_Start+0x144>
 8002a0e:	2300      	movs	r3, #0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d007      	beq.n	8002a24 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a22:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a20      	ldr	r2, [pc, #128]	; (8002aac <HAL_TIM_PWM_Start+0x1e0>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d018      	beq.n	8002a60 <HAL_TIM_PWM_Start+0x194>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a36:	d013      	beq.n	8002a60 <HAL_TIM_PWM_Start+0x194>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a20      	ldr	r2, [pc, #128]	; (8002ac0 <HAL_TIM_PWM_Start+0x1f4>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d00e      	beq.n	8002a60 <HAL_TIM_PWM_Start+0x194>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a1f      	ldr	r2, [pc, #124]	; (8002ac4 <HAL_TIM_PWM_Start+0x1f8>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d009      	beq.n	8002a60 <HAL_TIM_PWM_Start+0x194>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a17      	ldr	r2, [pc, #92]	; (8002ab0 <HAL_TIM_PWM_Start+0x1e4>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d004      	beq.n	8002a60 <HAL_TIM_PWM_Start+0x194>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a16      	ldr	r2, [pc, #88]	; (8002ab4 <HAL_TIM_PWM_Start+0x1e8>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d115      	bne.n	8002a8c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	689a      	ldr	r2, [r3, #8]
 8002a66:	4b18      	ldr	r3, [pc, #96]	; (8002ac8 <HAL_TIM_PWM_Start+0x1fc>)
 8002a68:	4013      	ands	r3, r2
 8002a6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2b06      	cmp	r3, #6
 8002a70:	d015      	beq.n	8002a9e <HAL_TIM_PWM_Start+0x1d2>
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a78:	d011      	beq.n	8002a9e <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f042 0201 	orr.w	r2, r2, #1
 8002a88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a8a:	e008      	b.n	8002a9e <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f042 0201 	orr.w	r2, r2, #1
 8002a9a:	601a      	str	r2, [r3, #0]
 8002a9c:	e000      	b.n	8002aa0 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a9e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3710      	adds	r7, #16
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	40012c00 	.word	0x40012c00
 8002ab0:	40013400 	.word	0x40013400
 8002ab4:	40014000 	.word	0x40014000
 8002ab8:	40014400 	.word	0x40014400
 8002abc:	40014800 	.word	0x40014800
 8002ac0:	40000400 	.word	0x40000400
 8002ac4:	40000800 	.word	0x40000800
 8002ac8:	00010007 	.word	0x00010007

08002acc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d101      	bne.n	8002ae6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	e0fd      	b.n	8002ce2 <HAL_TIM_PWM_ConfigChannel+0x216>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2b14      	cmp	r3, #20
 8002af2:	f200 80f0 	bhi.w	8002cd6 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8002af6:	a201      	add	r2, pc, #4	; (adr r2, 8002afc <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002afc:	08002b51 	.word	0x08002b51
 8002b00:	08002cd7 	.word	0x08002cd7
 8002b04:	08002cd7 	.word	0x08002cd7
 8002b08:	08002cd7 	.word	0x08002cd7
 8002b0c:	08002b91 	.word	0x08002b91
 8002b10:	08002cd7 	.word	0x08002cd7
 8002b14:	08002cd7 	.word	0x08002cd7
 8002b18:	08002cd7 	.word	0x08002cd7
 8002b1c:	08002bd3 	.word	0x08002bd3
 8002b20:	08002cd7 	.word	0x08002cd7
 8002b24:	08002cd7 	.word	0x08002cd7
 8002b28:	08002cd7 	.word	0x08002cd7
 8002b2c:	08002c13 	.word	0x08002c13
 8002b30:	08002cd7 	.word	0x08002cd7
 8002b34:	08002cd7 	.word	0x08002cd7
 8002b38:	08002cd7 	.word	0x08002cd7
 8002b3c:	08002c55 	.word	0x08002c55
 8002b40:	08002cd7 	.word	0x08002cd7
 8002b44:	08002cd7 	.word	0x08002cd7
 8002b48:	08002cd7 	.word	0x08002cd7
 8002b4c:	08002c95 	.word	0x08002c95
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68b9      	ldr	r1, [r7, #8]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f000 f958 	bl	8002e0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	699a      	ldr	r2, [r3, #24]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f042 0208 	orr.w	r2, r2, #8
 8002b6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	699a      	ldr	r2, [r3, #24]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f022 0204 	bic.w	r2, r2, #4
 8002b7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	6999      	ldr	r1, [r3, #24]
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	691a      	ldr	r2, [r3, #16]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	430a      	orrs	r2, r1
 8002b8c:	619a      	str	r2, [r3, #24]
      break;
 8002b8e:	e0a3      	b.n	8002cd8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	68b9      	ldr	r1, [r7, #8]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f000 f9c8 	bl	8002f2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	699a      	ldr	r2, [r3, #24]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002baa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	699a      	ldr	r2, [r3, #24]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	6999      	ldr	r1, [r3, #24]
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	021a      	lsls	r2, r3, #8
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	619a      	str	r2, [r3, #24]
      break;
 8002bd0:	e082      	b.n	8002cd8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	68b9      	ldr	r1, [r7, #8]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f000 fa31 	bl	8003040 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	69da      	ldr	r2, [r3, #28]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f042 0208 	orr.w	r2, r2, #8
 8002bec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	69da      	ldr	r2, [r3, #28]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f022 0204 	bic.w	r2, r2, #4
 8002bfc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	69d9      	ldr	r1, [r3, #28]
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	691a      	ldr	r2, [r3, #16]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	430a      	orrs	r2, r1
 8002c0e:	61da      	str	r2, [r3, #28]
      break;
 8002c10:	e062      	b.n	8002cd8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	68b9      	ldr	r1, [r7, #8]
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f000 fa99 	bl	8003150 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	69da      	ldr	r2, [r3, #28]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	69da      	ldr	r2, [r3, #28]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	69d9      	ldr	r1, [r3, #28]
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	691b      	ldr	r3, [r3, #16]
 8002c48:	021a      	lsls	r2, r3, #8
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	430a      	orrs	r2, r1
 8002c50:	61da      	str	r2, [r3, #28]
      break;
 8002c52:	e041      	b.n	8002cd8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	68b9      	ldr	r1, [r7, #8]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f000 fae2 	bl	8003224 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f042 0208 	orr.w	r2, r2, #8
 8002c6e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f022 0204 	bic.w	r2, r2, #4
 8002c7e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	691a      	ldr	r2, [r3, #16]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002c92:	e021      	b.n	8002cd8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68b9      	ldr	r1, [r7, #8]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f000 fb26 	bl	80032ec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cbe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	021a      	lsls	r2, r3, #8
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002cd4:	e000      	b.n	8002cd8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8002cd6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3710      	adds	r7, #16
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop

08002cec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b085      	sub	sp, #20
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	4a3c      	ldr	r2, [pc, #240]	; (8002df0 <TIM_Base_SetConfig+0x104>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d00f      	beq.n	8002d24 <TIM_Base_SetConfig+0x38>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d0a:	d00b      	beq.n	8002d24 <TIM_Base_SetConfig+0x38>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	4a39      	ldr	r2, [pc, #228]	; (8002df4 <TIM_Base_SetConfig+0x108>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d007      	beq.n	8002d24 <TIM_Base_SetConfig+0x38>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4a38      	ldr	r2, [pc, #224]	; (8002df8 <TIM_Base_SetConfig+0x10c>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d003      	beq.n	8002d24 <TIM_Base_SetConfig+0x38>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4a37      	ldr	r2, [pc, #220]	; (8002dfc <TIM_Base_SetConfig+0x110>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d108      	bne.n	8002d36 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	68fa      	ldr	r2, [r7, #12]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a2d      	ldr	r2, [pc, #180]	; (8002df0 <TIM_Base_SetConfig+0x104>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d01b      	beq.n	8002d76 <TIM_Base_SetConfig+0x8a>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d44:	d017      	beq.n	8002d76 <TIM_Base_SetConfig+0x8a>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a2a      	ldr	r2, [pc, #168]	; (8002df4 <TIM_Base_SetConfig+0x108>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d013      	beq.n	8002d76 <TIM_Base_SetConfig+0x8a>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a29      	ldr	r2, [pc, #164]	; (8002df8 <TIM_Base_SetConfig+0x10c>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d00f      	beq.n	8002d76 <TIM_Base_SetConfig+0x8a>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a28      	ldr	r2, [pc, #160]	; (8002dfc <TIM_Base_SetConfig+0x110>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d00b      	beq.n	8002d76 <TIM_Base_SetConfig+0x8a>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a27      	ldr	r2, [pc, #156]	; (8002e00 <TIM_Base_SetConfig+0x114>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d007      	beq.n	8002d76 <TIM_Base_SetConfig+0x8a>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a26      	ldr	r2, [pc, #152]	; (8002e04 <TIM_Base_SetConfig+0x118>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d003      	beq.n	8002d76 <TIM_Base_SetConfig+0x8a>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a25      	ldr	r2, [pc, #148]	; (8002e08 <TIM_Base_SetConfig+0x11c>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d108      	bne.n	8002d88 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	68fa      	ldr	r2, [r7, #12]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	68fa      	ldr	r2, [r7, #12]
 8002d9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	689a      	ldr	r2, [r3, #8]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	4a10      	ldr	r2, [pc, #64]	; (8002df0 <TIM_Base_SetConfig+0x104>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d00f      	beq.n	8002dd4 <TIM_Base_SetConfig+0xe8>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	4a11      	ldr	r2, [pc, #68]	; (8002dfc <TIM_Base_SetConfig+0x110>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d00b      	beq.n	8002dd4 <TIM_Base_SetConfig+0xe8>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4a10      	ldr	r2, [pc, #64]	; (8002e00 <TIM_Base_SetConfig+0x114>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d007      	beq.n	8002dd4 <TIM_Base_SetConfig+0xe8>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	4a0f      	ldr	r2, [pc, #60]	; (8002e04 <TIM_Base_SetConfig+0x118>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d003      	beq.n	8002dd4 <TIM_Base_SetConfig+0xe8>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4a0e      	ldr	r2, [pc, #56]	; (8002e08 <TIM_Base_SetConfig+0x11c>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d103      	bne.n	8002ddc <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	691a      	ldr	r2, [r3, #16]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	615a      	str	r2, [r3, #20]
}
 8002de2:	bf00      	nop
 8002de4:	3714      	adds	r7, #20
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	40012c00 	.word	0x40012c00
 8002df4:	40000400 	.word	0x40000400
 8002df8:	40000800 	.word	0x40000800
 8002dfc:	40013400 	.word	0x40013400
 8002e00:	40014000 	.word	0x40014000
 8002e04:	40014400 	.word	0x40014400
 8002e08:	40014800 	.word	0x40014800

08002e0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b087      	sub	sp, #28
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a1b      	ldr	r3, [r3, #32]
 8002e1a:	f023 0201 	bic.w	r2, r3, #1
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a1b      	ldr	r3, [r3, #32]
 8002e26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f023 0303 	bic.w	r3, r3, #3
 8002e46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	68fa      	ldr	r2, [r7, #12]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	f023 0302 	bic.w	r3, r3, #2
 8002e58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	697a      	ldr	r2, [r7, #20]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4a2c      	ldr	r2, [pc, #176]	; (8002f18 <TIM_OC1_SetConfig+0x10c>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d00f      	beq.n	8002e8c <TIM_OC1_SetConfig+0x80>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4a2b      	ldr	r2, [pc, #172]	; (8002f1c <TIM_OC1_SetConfig+0x110>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d00b      	beq.n	8002e8c <TIM_OC1_SetConfig+0x80>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	4a2a      	ldr	r2, [pc, #168]	; (8002f20 <TIM_OC1_SetConfig+0x114>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d007      	beq.n	8002e8c <TIM_OC1_SetConfig+0x80>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	4a29      	ldr	r2, [pc, #164]	; (8002f24 <TIM_OC1_SetConfig+0x118>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d003      	beq.n	8002e8c <TIM_OC1_SetConfig+0x80>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	4a28      	ldr	r2, [pc, #160]	; (8002f28 <TIM_OC1_SetConfig+0x11c>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d10c      	bne.n	8002ea6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	f023 0308 	bic.w	r3, r3, #8
 8002e92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	697a      	ldr	r2, [r7, #20]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	f023 0304 	bic.w	r3, r3, #4
 8002ea4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a1b      	ldr	r2, [pc, #108]	; (8002f18 <TIM_OC1_SetConfig+0x10c>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d00f      	beq.n	8002ece <TIM_OC1_SetConfig+0xc2>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a1a      	ldr	r2, [pc, #104]	; (8002f1c <TIM_OC1_SetConfig+0x110>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d00b      	beq.n	8002ece <TIM_OC1_SetConfig+0xc2>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a19      	ldr	r2, [pc, #100]	; (8002f20 <TIM_OC1_SetConfig+0x114>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d007      	beq.n	8002ece <TIM_OC1_SetConfig+0xc2>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a18      	ldr	r2, [pc, #96]	; (8002f24 <TIM_OC1_SetConfig+0x118>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d003      	beq.n	8002ece <TIM_OC1_SetConfig+0xc2>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a17      	ldr	r2, [pc, #92]	; (8002f28 <TIM_OC1_SetConfig+0x11c>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d111      	bne.n	8002ef2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ed4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002edc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	695b      	ldr	r3, [r3, #20]
 8002ee2:	693a      	ldr	r2, [r7, #16]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	699b      	ldr	r3, [r3, #24]
 8002eec:	693a      	ldr	r2, [r7, #16]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	693a      	ldr	r2, [r7, #16]
 8002ef6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	68fa      	ldr	r2, [r7, #12]
 8002efc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	685a      	ldr	r2, [r3, #4]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	697a      	ldr	r2, [r7, #20]
 8002f0a:	621a      	str	r2, [r3, #32]
}
 8002f0c:	bf00      	nop
 8002f0e:	371c      	adds	r7, #28
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr
 8002f18:	40012c00 	.word	0x40012c00
 8002f1c:	40013400 	.word	0x40013400
 8002f20:	40014000 	.word	0x40014000
 8002f24:	40014400 	.word	0x40014400
 8002f28:	40014800 	.word	0x40014800

08002f2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b087      	sub	sp, #28
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a1b      	ldr	r3, [r3, #32]
 8002f3a:	f023 0210 	bic.w	r2, r3, #16
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a1b      	ldr	r3, [r3, #32]
 8002f46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	021b      	lsls	r3, r3, #8
 8002f6e:	68fa      	ldr	r2, [r7, #12]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	f023 0320 	bic.w	r3, r3, #32
 8002f7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	011b      	lsls	r3, r3, #4
 8002f82:	697a      	ldr	r2, [r7, #20]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	4a28      	ldr	r2, [pc, #160]	; (800302c <TIM_OC2_SetConfig+0x100>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d003      	beq.n	8002f98 <TIM_OC2_SetConfig+0x6c>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4a27      	ldr	r2, [pc, #156]	; (8003030 <TIM_OC2_SetConfig+0x104>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d10d      	bne.n	8002fb4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	011b      	lsls	r3, r3, #4
 8002fa6:	697a      	ldr	r2, [r7, #20]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fb2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4a1d      	ldr	r2, [pc, #116]	; (800302c <TIM_OC2_SetConfig+0x100>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d00f      	beq.n	8002fdc <TIM_OC2_SetConfig+0xb0>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4a1c      	ldr	r2, [pc, #112]	; (8003030 <TIM_OC2_SetConfig+0x104>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d00b      	beq.n	8002fdc <TIM_OC2_SetConfig+0xb0>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	4a1b      	ldr	r2, [pc, #108]	; (8003034 <TIM_OC2_SetConfig+0x108>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d007      	beq.n	8002fdc <TIM_OC2_SetConfig+0xb0>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4a1a      	ldr	r2, [pc, #104]	; (8003038 <TIM_OC2_SetConfig+0x10c>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d003      	beq.n	8002fdc <TIM_OC2_SetConfig+0xb0>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	4a19      	ldr	r2, [pc, #100]	; (800303c <TIM_OC2_SetConfig+0x110>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d113      	bne.n	8003004 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002fe2:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002fea:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	695b      	ldr	r3, [r3, #20]
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	693a      	ldr	r2, [r7, #16]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	693a      	ldr	r2, [r7, #16]
 8003000:	4313      	orrs	r3, r2
 8003002:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	693a      	ldr	r2, [r7, #16]
 8003008:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	68fa      	ldr	r2, [r7, #12]
 800300e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	685a      	ldr	r2, [r3, #4]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	697a      	ldr	r2, [r7, #20]
 800301c:	621a      	str	r2, [r3, #32]
}
 800301e:	bf00      	nop
 8003020:	371c      	adds	r7, #28
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	40012c00 	.word	0x40012c00
 8003030:	40013400 	.word	0x40013400
 8003034:	40014000 	.word	0x40014000
 8003038:	40014400 	.word	0x40014400
 800303c:	40014800 	.word	0x40014800

08003040 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003040:	b480      	push	{r7}
 8003042:	b087      	sub	sp, #28
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a1b      	ldr	r3, [r3, #32]
 800304e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a1b      	ldr	r3, [r3, #32]
 800305a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	69db      	ldr	r3, [r3, #28]
 8003066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800306e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003072:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f023 0303 	bic.w	r3, r3, #3
 800307a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68fa      	ldr	r2, [r7, #12]
 8003082:	4313      	orrs	r3, r2
 8003084:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800308c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	021b      	lsls	r3, r3, #8
 8003094:	697a      	ldr	r2, [r7, #20]
 8003096:	4313      	orrs	r3, r2
 8003098:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a27      	ldr	r2, [pc, #156]	; (800313c <TIM_OC3_SetConfig+0xfc>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d003      	beq.n	80030aa <TIM_OC3_SetConfig+0x6a>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a26      	ldr	r2, [pc, #152]	; (8003140 <TIM_OC3_SetConfig+0x100>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d10d      	bne.n	80030c6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80030b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	021b      	lsls	r3, r3, #8
 80030b8:	697a      	ldr	r2, [r7, #20]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80030c4:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a1c      	ldr	r2, [pc, #112]	; (800313c <TIM_OC3_SetConfig+0xfc>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d00f      	beq.n	80030ee <TIM_OC3_SetConfig+0xae>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a1b      	ldr	r2, [pc, #108]	; (8003140 <TIM_OC3_SetConfig+0x100>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d00b      	beq.n	80030ee <TIM_OC3_SetConfig+0xae>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a1a      	ldr	r2, [pc, #104]	; (8003144 <TIM_OC3_SetConfig+0x104>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d007      	beq.n	80030ee <TIM_OC3_SetConfig+0xae>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a19      	ldr	r2, [pc, #100]	; (8003148 <TIM_OC3_SetConfig+0x108>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d003      	beq.n	80030ee <TIM_OC3_SetConfig+0xae>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a18      	ldr	r2, [pc, #96]	; (800314c <TIM_OC3_SetConfig+0x10c>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d113      	bne.n	8003116 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80030f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80030fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	695b      	ldr	r3, [r3, #20]
 8003102:	011b      	lsls	r3, r3, #4
 8003104:	693a      	ldr	r2, [r7, #16]
 8003106:	4313      	orrs	r3, r2
 8003108:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	011b      	lsls	r3, r3, #4
 8003110:	693a      	ldr	r2, [r7, #16]
 8003112:	4313      	orrs	r3, r2
 8003114:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	693a      	ldr	r2, [r7, #16]
 800311a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	68fa      	ldr	r2, [r7, #12]
 8003120:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	685a      	ldr	r2, [r3, #4]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	697a      	ldr	r2, [r7, #20]
 800312e:	621a      	str	r2, [r3, #32]
}
 8003130:	bf00      	nop
 8003132:	371c      	adds	r7, #28
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr
 800313c:	40012c00 	.word	0x40012c00
 8003140:	40013400 	.word	0x40013400
 8003144:	40014000 	.word	0x40014000
 8003148:	40014400 	.word	0x40014400
 800314c:	40014800 	.word	0x40014800

08003150 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003150:	b480      	push	{r7}
 8003152:	b087      	sub	sp, #28
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a1b      	ldr	r3, [r3, #32]
 800315e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a1b      	ldr	r3, [r3, #32]
 800316a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	69db      	ldr	r3, [r3, #28]
 8003176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800317e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003182:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800318a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	021b      	lsls	r3, r3, #8
 8003192:	68fa      	ldr	r2, [r7, #12]
 8003194:	4313      	orrs	r3, r2
 8003196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800319e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	031b      	lsls	r3, r3, #12
 80031a6:	693a      	ldr	r2, [r7, #16]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	4a18      	ldr	r2, [pc, #96]	; (8003210 <TIM_OC4_SetConfig+0xc0>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d00f      	beq.n	80031d4 <TIM_OC4_SetConfig+0x84>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	4a17      	ldr	r2, [pc, #92]	; (8003214 <TIM_OC4_SetConfig+0xc4>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d00b      	beq.n	80031d4 <TIM_OC4_SetConfig+0x84>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4a16      	ldr	r2, [pc, #88]	; (8003218 <TIM_OC4_SetConfig+0xc8>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d007      	beq.n	80031d4 <TIM_OC4_SetConfig+0x84>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4a15      	ldr	r2, [pc, #84]	; (800321c <TIM_OC4_SetConfig+0xcc>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d003      	beq.n	80031d4 <TIM_OC4_SetConfig+0x84>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4a14      	ldr	r2, [pc, #80]	; (8003220 <TIM_OC4_SetConfig+0xd0>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d109      	bne.n	80031e8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	695b      	ldr	r3, [r3, #20]
 80031e0:	019b      	lsls	r3, r3, #6
 80031e2:	697a      	ldr	r2, [r7, #20]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	697a      	ldr	r2, [r7, #20]
 80031ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	68fa      	ldr	r2, [r7, #12]
 80031f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	685a      	ldr	r2, [r3, #4]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	693a      	ldr	r2, [r7, #16]
 8003200:	621a      	str	r2, [r3, #32]
}
 8003202:	bf00      	nop
 8003204:	371c      	adds	r7, #28
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop
 8003210:	40012c00 	.word	0x40012c00
 8003214:	40013400 	.word	0x40013400
 8003218:	40014000 	.word	0x40014000
 800321c:	40014400 	.word	0x40014400
 8003220:	40014800 	.word	0x40014800

08003224 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003224:	b480      	push	{r7}
 8003226:	b087      	sub	sp, #28
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a1b      	ldr	r3, [r3, #32]
 8003232:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a1b      	ldr	r3, [r3, #32]
 800323e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800324a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003256:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	68fa      	ldr	r2, [r7, #12]
 800325e:	4313      	orrs	r3, r2
 8003260:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003268:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	041b      	lsls	r3, r3, #16
 8003270:	693a      	ldr	r2, [r7, #16]
 8003272:	4313      	orrs	r3, r2
 8003274:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a17      	ldr	r2, [pc, #92]	; (80032d8 <TIM_OC5_SetConfig+0xb4>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d00f      	beq.n	800329e <TIM_OC5_SetConfig+0x7a>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a16      	ldr	r2, [pc, #88]	; (80032dc <TIM_OC5_SetConfig+0xb8>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d00b      	beq.n	800329e <TIM_OC5_SetConfig+0x7a>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a15      	ldr	r2, [pc, #84]	; (80032e0 <TIM_OC5_SetConfig+0xbc>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d007      	beq.n	800329e <TIM_OC5_SetConfig+0x7a>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a14      	ldr	r2, [pc, #80]	; (80032e4 <TIM_OC5_SetConfig+0xc0>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d003      	beq.n	800329e <TIM_OC5_SetConfig+0x7a>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a13      	ldr	r2, [pc, #76]	; (80032e8 <TIM_OC5_SetConfig+0xc4>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d109      	bne.n	80032b2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032a4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	695b      	ldr	r3, [r3, #20]
 80032aa:	021b      	lsls	r3, r3, #8
 80032ac:	697a      	ldr	r2, [r7, #20]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	697a      	ldr	r2, [r7, #20]
 80032b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	685a      	ldr	r2, [r3, #4]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	693a      	ldr	r2, [r7, #16]
 80032ca:	621a      	str	r2, [r3, #32]
}
 80032cc:	bf00      	nop
 80032ce:	371c      	adds	r7, #28
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr
 80032d8:	40012c00 	.word	0x40012c00
 80032dc:	40013400 	.word	0x40013400
 80032e0:	40014000 	.word	0x40014000
 80032e4:	40014400 	.word	0x40014400
 80032e8:	40014800 	.word	0x40014800

080032ec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b087      	sub	sp, #28
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a1b      	ldr	r3, [r3, #32]
 80032fa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a1b      	ldr	r3, [r3, #32]
 8003306:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800331a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800331e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	021b      	lsls	r3, r3, #8
 8003326:	68fa      	ldr	r2, [r7, #12]
 8003328:	4313      	orrs	r3, r2
 800332a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003332:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	051b      	lsls	r3, r3, #20
 800333a:	693a      	ldr	r2, [r7, #16]
 800333c:	4313      	orrs	r3, r2
 800333e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a18      	ldr	r2, [pc, #96]	; (80033a4 <TIM_OC6_SetConfig+0xb8>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d00f      	beq.n	8003368 <TIM_OC6_SetConfig+0x7c>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a17      	ldr	r2, [pc, #92]	; (80033a8 <TIM_OC6_SetConfig+0xbc>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d00b      	beq.n	8003368 <TIM_OC6_SetConfig+0x7c>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a16      	ldr	r2, [pc, #88]	; (80033ac <TIM_OC6_SetConfig+0xc0>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d007      	beq.n	8003368 <TIM_OC6_SetConfig+0x7c>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a15      	ldr	r2, [pc, #84]	; (80033b0 <TIM_OC6_SetConfig+0xc4>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d003      	beq.n	8003368 <TIM_OC6_SetConfig+0x7c>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a14      	ldr	r2, [pc, #80]	; (80033b4 <TIM_OC6_SetConfig+0xc8>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d109      	bne.n	800337c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800336e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	695b      	ldr	r3, [r3, #20]
 8003374:	029b      	lsls	r3, r3, #10
 8003376:	697a      	ldr	r2, [r7, #20]
 8003378:	4313      	orrs	r3, r2
 800337a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	697a      	ldr	r2, [r7, #20]
 8003380:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	68fa      	ldr	r2, [r7, #12]
 8003386:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	685a      	ldr	r2, [r3, #4]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	693a      	ldr	r2, [r7, #16]
 8003394:	621a      	str	r2, [r3, #32]
}
 8003396:	bf00      	nop
 8003398:	371c      	adds	r7, #28
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	40012c00 	.word	0x40012c00
 80033a8:	40013400 	.word	0x40013400
 80033ac:	40014000 	.word	0x40014000
 80033b0:	40014400 	.word	0x40014400
 80033b4:	40014800 	.word	0x40014800

080033b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b087      	sub	sp, #28
 80033bc:	af00      	add	r7, sp, #0
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	60b9      	str	r1, [r7, #8]
 80033c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	f003 031f 	and.w	r3, r3, #31
 80033ca:	2201      	movs	r2, #1
 80033cc:	fa02 f303 	lsl.w	r3, r2, r3
 80033d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6a1a      	ldr	r2, [r3, #32]
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	43db      	mvns	r3, r3
 80033da:	401a      	ands	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6a1a      	ldr	r2, [r3, #32]
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	f003 031f 	and.w	r3, r3, #31
 80033ea:	6879      	ldr	r1, [r7, #4]
 80033ec:	fa01 f303 	lsl.w	r3, r1, r3
 80033f0:	431a      	orrs	r2, r3
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	621a      	str	r2, [r3, #32]
}
 80033f6:	bf00      	nop
 80033f8:	371c      	adds	r7, #28
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
	...

08003404 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003404:	b480      	push	{r7}
 8003406:	b085      	sub	sp, #20
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003414:	2b01      	cmp	r3, #1
 8003416:	d101      	bne.n	800341c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003418:	2302      	movs	r3, #2
 800341a:	e063      	b.n	80034e4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2202      	movs	r2, #2
 8003428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a2b      	ldr	r2, [pc, #172]	; (80034f0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d004      	beq.n	8003450 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a2a      	ldr	r2, [pc, #168]	; (80034f4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d108      	bne.n	8003462 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003456:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	68fa      	ldr	r2, [r7, #12]
 800345e:	4313      	orrs	r3, r2
 8003460:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003468:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	4313      	orrs	r3, r2
 8003472:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68fa      	ldr	r2, [r7, #12]
 800347a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a1b      	ldr	r2, [pc, #108]	; (80034f0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d018      	beq.n	80034b8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800348e:	d013      	beq.n	80034b8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a18      	ldr	r2, [pc, #96]	; (80034f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d00e      	beq.n	80034b8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a17      	ldr	r2, [pc, #92]	; (80034fc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d009      	beq.n	80034b8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a12      	ldr	r2, [pc, #72]	; (80034f4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d004      	beq.n	80034b8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a13      	ldr	r2, [pc, #76]	; (8003500 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d10c      	bne.n	80034d2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034be:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	68ba      	ldr	r2, [r7, #8]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	68ba      	ldr	r2, [r7, #8]
 80034d0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2201      	movs	r2, #1
 80034d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034e2:	2300      	movs	r3, #0
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3714      	adds	r7, #20
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr
 80034f0:	40012c00 	.word	0x40012c00
 80034f4:	40013400 	.word	0x40013400
 80034f8:	40000400 	.word	0x40000400
 80034fc:	40000800 	.word	0x40000800
 8003500:	40014000 	.word	0x40014000

08003504 <__libc_init_array>:
 8003504:	b570      	push	{r4, r5, r6, lr}
 8003506:	4e0d      	ldr	r6, [pc, #52]	; (800353c <__libc_init_array+0x38>)
 8003508:	4c0d      	ldr	r4, [pc, #52]	; (8003540 <__libc_init_array+0x3c>)
 800350a:	1ba4      	subs	r4, r4, r6
 800350c:	10a4      	asrs	r4, r4, #2
 800350e:	2500      	movs	r5, #0
 8003510:	42a5      	cmp	r5, r4
 8003512:	d109      	bne.n	8003528 <__libc_init_array+0x24>
 8003514:	4e0b      	ldr	r6, [pc, #44]	; (8003544 <__libc_init_array+0x40>)
 8003516:	4c0c      	ldr	r4, [pc, #48]	; (8003548 <__libc_init_array+0x44>)
 8003518:	f000 f820 	bl	800355c <_init>
 800351c:	1ba4      	subs	r4, r4, r6
 800351e:	10a4      	asrs	r4, r4, #2
 8003520:	2500      	movs	r5, #0
 8003522:	42a5      	cmp	r5, r4
 8003524:	d105      	bne.n	8003532 <__libc_init_array+0x2e>
 8003526:	bd70      	pop	{r4, r5, r6, pc}
 8003528:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800352c:	4798      	blx	r3
 800352e:	3501      	adds	r5, #1
 8003530:	e7ee      	b.n	8003510 <__libc_init_array+0xc>
 8003532:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003536:	4798      	blx	r3
 8003538:	3501      	adds	r5, #1
 800353a:	e7f2      	b.n	8003522 <__libc_init_array+0x1e>
 800353c:	080035a4 	.word	0x080035a4
 8003540:	080035a4 	.word	0x080035a4
 8003544:	080035a4 	.word	0x080035a4
 8003548:	080035a8 	.word	0x080035a8

0800354c <memset>:
 800354c:	4402      	add	r2, r0
 800354e:	4603      	mov	r3, r0
 8003550:	4293      	cmp	r3, r2
 8003552:	d100      	bne.n	8003556 <memset+0xa>
 8003554:	4770      	bx	lr
 8003556:	f803 1b01 	strb.w	r1, [r3], #1
 800355a:	e7f9      	b.n	8003550 <memset+0x4>

0800355c <_init>:
 800355c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800355e:	bf00      	nop
 8003560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003562:	bc08      	pop	{r3}
 8003564:	469e      	mov	lr, r3
 8003566:	4770      	bx	lr

08003568 <_fini>:
 8003568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800356a:	bf00      	nop
 800356c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800356e:	bc08      	pop	{r3}
 8003570:	469e      	mov	lr, r3
 8003572:	4770      	bx	lr
